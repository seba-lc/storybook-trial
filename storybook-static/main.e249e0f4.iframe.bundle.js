(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./.storybook/preview.js-generated-config-entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);var preview_namespaceObject={};__webpack_require__.r(preview_namespaceObject),__webpack_require__.d(preview_namespaceObject,"decorators",(function(){return decorators}));__webpack_require__("./node_modules/core-js/modules/es.object.keys.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.array.filter.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptor.js"),__webpack_require__("./node_modules/core-js/modules/es.array.for-each.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.for-each.js"),__webpack_require__("./node_modules/core-js/modules/es.object.get-own-property-descriptors.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-properties.js"),__webpack_require__("./node_modules/core-js/modules/es.object.define-property.js");var ClientApi=__webpack_require__("./node_modules/@storybook/client-api/dist/esm/ClientApi.js"),decorators=[__webpack_require__("./node_modules/@storybook/native-addon/dist/index.js").DeviceDecorator];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}Object.keys(preview_namespaceObject).forEach((function(key){var value=preview_namespaceObject[key];switch(key){case"args":return Object(ClientApi.d)(value);case"argTypes":return Object(ClientApi.b)(value);case"decorators":return value.forEach((function(decorator){return Object(ClientApi.f)(decorator,!1)}));case"loaders":return value.forEach((function(loader){return Object(ClientApi.g)(loader,!1)}));case"parameters":return Object(ClientApi.h)(function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){_defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}({},value),!1);case"argTypesEnhancers":return value.forEach((function(enhancer){return Object(ClientApi.c)(enhancer)}));case"argsEnhancers":return value.forEach((function(enhancer){return Object(ClientApi.e)(enhancer)}));case"render":return Object(ClientApi.i)(value);case"globals":case"globalTypes":var v={};return v[key]=value,Object(ClientApi.h)(v,!1);case"__namedExportsOrder":case"decorateStory":case"renderToDOM":return null;default:return console.log(key+" was not supported :( !")}}))},"./generated-stories-entry.js":function(module,exports,__webpack_require__){"use strict";(function(module){(0,__webpack_require__("./node_modules/@storybook/react/dist/esm/client/index.js").configure)([__webpack_require__("./stories sync ^\\.[\\\\/](?:(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.jsx)$"),__webpack_require__("./stories sync ^\\.[\\\\/](?:(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.playground\\.jsx)$")],module,!1)}).call(this,__webpack_require__("./node_modules/webpack/buildin/module.js")(module))},"./stories sync ^\\.[\\\\/](?:(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.jsx)$":function(module,exports,__webpack_require__){var map={"./button.stories.jsx":"./stories/button.stories.jsx","./card.stories.jsx":"./stories/card.stories.jsx","./chips.stories.jsx":"./stories/chips.stories.jsx","./dialogs.stories.jsx":"./stories/dialogs.stories.jsx","./floatingButton.stories.jsx":"./stories/floatingButton.stories.jsx","./radio.stories.jsx":"./stories/radio.stories.jsx","./slider.stories.jsx":"./stories/slider.stories.jsx","./snackbar.stories.jsx":"./stories/snackbar.stories.jsx","./switch.stories.jsx":"./stories/switch.stories.jsx","./tabs.stories.jsx":"./stories/tabs.stories.jsx","./textfield.stories.jsx":"./stories/textfield.stories.jsx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./stories sync ^\\.[\\\\/](?:(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.jsx)$"},"./stories sync ^\\.[\\\\/](?:(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.playground\\.jsx)$":function(module,exports,__webpack_require__){var map={"./button.stories.playground.jsx":"./stories/button.stories.playground.jsx"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./stories sync ^\\.[\\\\/](?:(?!\\.)(?=.)[^\\\\/]*?\\.stories\\.playground\\.jsx)$"},"./stories/button.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Button"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"button"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Buttons"\nlayout: detail\nsection: components\nexcerpt: "A customizable button component with updated visual styles."\niconId: materialbutton\npath: /catalog/buttons/\n--\x3e\n\n# Buttons\n\n[Buttons](https://material.io/components/buttons/) allow users to take actions,\nand make choices, with a single tap.\n\n!["Overview"](assets/buttons/buttons_hero.png)\n\n**Contents**\n\n*   [Using buttons](#using-buttons)\n*   [Elevated button](#elevated-button)\n*   [Filled button](#filled-button)\n*   [Filled tonal button](#filled-tonal-button)\n*   [Outlined button](#outlined-button)\n*   [Text button](#text-button)\n*   [Toggle button](#toggle-button)\n*   [Icon button](#icon-button)\n*   [Theming](#theming-buttons)\n\n## Using buttons\n\nBefore you can use Material buttons, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n**Note:** `<Button>` is auto-inflated as\n`<com.google.android.material.button.MaterialButton>` via\n`MaterialComponentsViewInflater` when using a `Theme.Material3.*` theme.\n\n### Making buttons accessible\n\nButtons support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in buttons is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\nFor more information on content labels, go to the\n[Android accessibility help guide](https://support.google.com/accessibility/android/answer/7158690).\n\n### Types\n\nThere are five types of common buttons: 1. [Elevated button](#elevated-button),\n2. [Filled button](#filled-button), 3.\n[Filled tonal button](#filled-tonal-button), 4.\n[Outlined button](#outlined-button), 5. [Text button](#text-button).\n\n[Toggle button](#toggle-button) is an additional pattern using a segmented\ncontainer or icon.\n\n!["Button types - elevated, filled, filled tonal, outlined and text."](assets/buttons/buttons_types.png)\n\n## Elevated button\n\n[Elevated buttons](https://material.io/components/buttons/#elevated-button) are\nessentially outlined buttons with a shadow. To prevent shadow creep, only use\nthem when absolutely necessary, such as when the button requires visual\nseparation from a patterned background.\n\n### Elevated button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows an elevated button with a text label.\n\n!["Elevated button with purple text \'Elevated button\' over a white background."](assets/buttons/elevated-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.ElevatedButton"\n    android:id="@+id/elevatedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Elevated button"\n/>\n```\n\nIn code:\n\n```kt\nelevatedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to an elevated button\n\nThe following example shows an elevated button with an icon.\n\n!["Elevated button with purple text \'Elevated button\', grey border and \'+\' icon\nover a white background."](assets/buttons/elevated-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.ElevatedButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nAn elevated button has a text label, a stroked container and an optional icon.\n\n![Elevated button anatomy diagram](assets/buttons/elevated_button_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `1dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSurface` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ---------------------------------------------\n**Default style** | `Widget.Material3.Button.ElevatedButton`\n**Icon style**    | `Widget.Material3.Button.ElevatedButton.Icon`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Filled button\n\n[Filled button\'s](https://material.io/components/buttons/#filled-button)\ncontrasting surface color makes it the most prominent button after the FAB. It’s\nused for final or unblocking actions in a flow.\n\n**Note** The filled button is the default style if the style is not set.\n\n### Filled button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a filled button with a text label and a filled\ncontainer.\n\n!["Filled button with white text \'Filled button\' and purple container over a\nwhite background."](assets/buttons/filled-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/filledButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Filled button"\n/>\n```\n\n**Note:** Since this is the default type, you don\'t need to specify a style tag\nas long as you are using a Material Components Theme. If not, set the style to\n`@style/Widget.Material3.Button`.\n\nIn code:\n\n```kt\nfilledButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a filled button\n\nThe following example shows a filled button with an icon.\n\n!["Filled button with white text \'Filled button\', purple container and \'+\' icon\nover a white background."](assets/buttons/filled-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nA filled button has a text label, a filled container and an optional icon.\n\n![Filled button anatomy diagram](assets/buttons/filled_button_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `2dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnPrimary` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement                   | Style\n------------------------- | -----------------------------------------------\n**Default style**         | `Widget.Material3.Button`\n**Icon style**            | `Widget.Material3.Button.Icon`\n**Unelevated style**      | `Widget.Material3.Button.UnelevatedButton`\n**Unelevated icon style** | `Widget.Material3.Button.UnelevatedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Filled tonal button\n\n[Filled tonal buttons](https://material.io/components/buttons/#filled-tonal-button)\nhave a lighter background color and darker label color, making them less\nvisually prominent than a regular filled button. They’re still used for final or\nunblocking actions in a flow, but may be better when these actions don’t require\nquite so much emphasis.\n\n### Filled tonal button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a filled tonal button with a text label and a filled\ncontainer.\n\n!["Filled tonal button with white text \'Filled tonal button\' and purple\ncontainer over a white background."](assets/buttons/filled-button-tonal.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TonalButton"\n    android:id="@+id/filledTonalButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Filled tonal button"\n/>\n```\n\nIn code:\n\n```kt\nfilledTonalButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a filled tonal button\n\nThe following example shows a filled tonal button with an icon.\n\n!["Filled tonal button with white text \'Filled tonal button\', purple container\nand \'+\' icon over a white\nbackground."](assets/buttons/filled-button-tonal-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TonalButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nA filled tonal button has a text label, a filled container and an optional icon.\n\n![Filled tonal button anatomy diagram](assets/buttons/filled_button_tonal_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSecondaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorSecondaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `2dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSecondaryContainer` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_tonal_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSecondaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------------\n**Default style** | `Widget.Material3.Button.TonalButton`\n**Icon style**    | `Widget.Material3.Button.TonalButton.Icon`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Outlined button\n\n[Outlined buttons](https://material.io/components/buttons/#outlined-button) are\nfor actions that need attention but aren’t the primary action, such as “See all”\nor “Add to cart.” This is also the button used to give someone the opportunity\nto change their mind or escape a flow.\n\n### Outlined button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows an outlined button with a text label and stroked\ncontainer.\n\n!["Outlined button with purple text \'Outlined button\' and grey border over a\nwhite background."](assets/buttons/outlined-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialButtonOutlinedStyle"\n    android:id="@+id/outlinedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Outlined button"\n/>\n```\n\nIn code:\n\n```kt\noutlinedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to an outlined button\n\nThe following example shows an outlined button with an icon.\n\n!["Outlined button with purple text \'Outlined button\', grey border and \'+\' icon\nover a white background."](assets/buttons/outlined-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.OutlinedButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nAn outlined button has a text label, a stroked container and an optional icon.\n\n![Outlined button anatomy diagram](assets/buttons/outlined_button_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `?attr/colorOnSurface` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_button_outline_color_selector.xml))\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `1dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSurface` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ---------------------------------------------\n**Default style** | `Widget.Material3.Button.OutlinedButton`\n**Icon style**    | `Widget.Material3.Button.OutlinedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonOutlinedStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Text button\n\n[Text buttons](https://material.io/components/buttons/#text-button) have less\nvisual prominence, so should be used for low emphasis actions, such as when\npresenting multiple options.\n\n### Text button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a text button with a text label.\n\n!["Text button with purple text \'Text button\' over a white background."](assets/buttons/text-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TextButton"\n    android:id="@+id/textButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Text button"\n/>\n```\n\nIn code:\n\n```kt\ntextButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a text button\n\nThe following example shows a text button with an icon.\n\n!["Text button with purple text \'Text button\' and \'+\' icon over a white\nbackground."](assets/buttons/text-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TextButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nA text button has a text label, a transparent container and an optional icon.\n\n![Text button anatomy diagram](assets/buttons/text_button_anatomy.png)\n\n1.  Label text\n2.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSurface` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement                | Style\n---------------------- | -----------------------------------------------------\n**Default style**      | `Widget.Material3.Button.TextButton`\n**Icon style**         | `Widget.Material3.Button.TextButton.Icon`\n**Full Width Buttons** | `Widget.Material3.Button.TextButton.Dialog.FullWidth`\n\nDefault style theme attribute: `?attr/borderlessButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Toggle button\n\n[Toggle buttons](https://material.io/components/buttons/#toggle-button) can be\nused to select from a group of choices.\n\nThere are two types of toggle buttons:\n\n*   [Toggle button](#toggle-button)\n*   [Icon](#icon)\n\n### Toggle button\n\nTo emphasize groups of related toggle buttons, a group should share a common\ncontainer.\n\n#### Toggle button examples\n\nAPI and source code:\n\n*   `MaterialButtonToggleGroup`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButtonToggleGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButtonToggleGroup.java)\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a toggle button with three buttons that have text\nlabels.\n\n!["Toggle button example for Android with text labels - \'Button 1\', \'Button 2\'\nand \'Button 3\' - and grey/purple borders over a white\nbackground."](assets/buttons/toggle-button-text.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    android:id="@+id/toggleButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content">\n    <Button\n        style="?attr/materialButtonOutlinedStyle"\n        android:id="@+id/button1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 1"\n    />\n    <Button\n        style="?attr/materialButtonOutlinedStyle"\n        android:id="@+id/button2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 2"\n    />\n    <Button\n        style="?attr/materialButtonOutlinedStyle"\n        android:id="@+id/button3"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 3"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\nIn code:\n\n```kt\ntoggleButton.addOnButtonCheckedListener { toggleButton, checkedId, isChecked ->\n    // Respond to button selection\n}\n```\n\n#### Implementing an icon-only toggle button\n\nThe following example shows a toggle button with three buttons that have icons.\n\n!["Toggle buttons with icons - heart, add and search - and grey/purple borders\nover a white background."](assets/buttons/toggle-button.png)\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="Widget.App.Button.OutlinedButton.IconOnly" parent="Widget.Material3.Button.OutlinedButton">\n    <item name="iconPadding">0dp</item>\n    <item name="android:insetTop">0dp</item>\n    <item name="android:insetBottom">0dp</item>\n    <item name="android:paddingLeft">12dp</item>\n    <item name="android:paddingRight">12dp</item>\n    <item name="android:minWidth">48dp</item>\n    <item name="android:minHeight">48dp</item>\n</style>\n```\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    ...>\n    <Button\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n        ...\n        app:icon="@drawable/ic_favorite_24dp"\n    />\n    <Button\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n        ...\n        app:icon="@drawable/ic_add_24dp"\n    />\n    <Button\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n        ...\n        app:icon="@drawable/ic_search_24dp"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\n### Anatomy and key properties\n\nA toggle button has a shared stroked container, icons and/or text labels.\n\n![Toggle button anatomy](assets/buttons/toggle_button_anatomy.png)\n\n1.  Container\n2.  Icon\n\n#### Selection attributes\n\nElement                             | Attribute               | Related method(s)                                | Default value\n----------------------------------- | ----------------------- | ------------------------------------------------ | -------------\n**Single selection**                | `app:singleSelection`   | `setSingleSelection`<br/>`isSingleSelection`     | `false`\n**Selection required**              | `app:selectionRequired` | `setSelectionRequired`<br/>`isSelectionRequired` | `false`\n**Enable the group and all children | `android:enabled`       | `setEnabled`<br/>`isEnabled`                     | `true`\n\n#### Styles\n\nElement           | Style\n----------------- | -----------------------------------------------------\n**Default style** | `Widget.Material3.MaterialButtonToggleGroup`\n\nDefault style theme attribute: `?attr/materialButtonToggleGroupStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n### Icon\n\nIcons can be used as toggle buttons when they allow selection, or deselection,\nof a single choice, such as marking an item as a favorite.\n\n#### Icon example\n\nAPI and source code:\n\n*   `CheckBox`\n    *   [Class description](https://developer.android.com/reference/android/widget/CheckBox)\n\n**Note** The `CheckBox` API is just one of several inputs that can implement the\nicon button. See other\n[selection controls](https://material.io/components/selection-controls/) for\nmore details.\n\nThe following example shows an icon that can be used independently or in items\nof a `RecyclerView`.\n\n![Toggle icon example showing 4 images, heart icon in the upper-right corner of\neach image](assets/buttons/android_toggle_button.png)\n\nIn the layout:\n\n```xml\n<CheckBox\n    android:id="@+id/icon"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:button="@drawable/sl_favourite_24dp"\n    app:buttonTint="@android:color/white"\n/>\n```\n\nIn `res/drawable/sl_favourite_24dp.xml`:\n\n```xml\n<selector>\n    <item\n        android:drawable="@drawable/ic_favourite_outlined_24dp"\n        android:state_checked="false"\n    />\n    <item\n        android:drawable="@drawable/ic_favourite_filled_24dp"\n        android:state_checked="true"\n    />\n    <item android:drawable="@drawable/ic_favourite_outlined_24dp" />\n</selector>\n```\n\nIn code:\n\n```kt\nicon.setOnCheckedChangeListener { checkBox, isChecked ->\n    // Respond to icon toggle\n}\n```\n\n## Icon button\n\n[Icon buttons](https://material.io/components/buttons/#icon-buttons) help users\ntake supplementary actions with a single tap. There are two types of icon\nbuttons: standard and contained.\n\n*   **Standard icon button:** By default icon buttons will not have a container.\n*   **Contained icon button:** Optionally, it is possible to have a container\n    around the icon.\n\nSee [Icon button examples](#icon-button-examples) section below for more\ninformation.\n\n### Usage\n\n*   Icon buttons should be used when a compact button is required, such as in a\n    toolbar.\n*   Icon buttons can take the form of a wide range of system icons.\n*   Ensure the meaning of the icon is unambiguous.\n*   Ensure that the tooltip describes the button’s action, rather than\n    the icon.\n\n#### Icon button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\n#### Standard Icon button\n\nThe following example shows a standard icon button.\n\n!["Standard icon button example for Android over a white background."](assets/buttons/icon-button-standard.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\nIn code:\n\n```kt\niconButton.addOnButtonCheckedListener { iconButton, checkedId, isChecked ->\n    // Respond to button selection\n}\n```\n\n#### Filled Icon button\n\nThe following example shows a contained icon button that is filled.\n\n!["Filled icon button example for Android over a white background."](assets/buttons/filled-icon-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonFilledStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\n#### Filled Tonal Icon button\n\nThe following example shows a tonal icon button.\n\n!["Filled tonal icon button example for Android over a white background."](assets/buttons/filled-tonal-icon-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonFilledTonalStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\n#### Outlined Icon button\n\nThe following example shows an outlined icon button.\n\n!["Outlined icon button example for Android over a white background."](assets/buttons/outlined-icon-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonOutlinedStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\n#### Styles & Theme attributes\n\nElement                      | Style                                             | Theme Attribute\n---------------------------- | ------------------------------------------------- | ---------------\n**Default style**            | `Widget.Material3.Button.IconButton`              | `?attr/materialIconButtonStyle`\n**Filled Icon Button**       | `Widget.Material3.Button.IconButton.Filled`       | `?attr/materialIconButtonFilledStyle`\n**Filled Tonal Icon Button** | `Widget.Material3.Button.IconButton.Filled.Tonal` | `?attr/materialIconButtonFilledTonalStyle`\n**Outlined Icon Button**     | `Widget.Material3.Button.IconButton.Outlined`     | `?attr/materialIconButtonOutlinedStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Theming buttons\n\nButtons support\n[Material Theming](https://material.io/components/buttons/#theming) and can be\ncustomized in terms of color, typography and shape.\n\n### Button theming example\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows text, outlined and filled button types with\nMaterial Theming.\n\n!["Button theming with three buttons - text, outlined and filled - with pink\ncolor theming and cut corners."](assets/buttons/button-theming.png)\n\n#### Implementing button theming\n\nUse theme attributes and styles in `res/values/styles.xml` to add the theme to\nall buttons. This affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="textAppearanceLabelLarge">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="TextAppearance.App.Button" parent="TextAppearance.Material3.LabelLarge">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.Material3.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nUse default style theme attributes, styles and theme overlays. This adds the\ntheme to all buttons but does not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="borderlessButtonStyle">@style/Widget.App.Button.TextButton</item>\n    <item name="materialButtonOutlinedStyle">@style/Widget.App.Button.OutlinedButton</item>\n    <item name="materialButtonStyle">@style/Widget.App.Button</item>\n</style>\n\n<style name="Widget.App.Button.TextButton" parent="Widget.Material3.Button.TextButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button.OutlinedButton" parent="Widget.Material3.Button.OutlinedButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button" parent="Widget.Material3.Button">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="ThemeOverlay.App.Button.TextButton" parent="">\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n</style>\n\n<style name="ThemeOverlay.App.Button" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n</style>\n```\n\nUse one of the styles in the layout. That will affect only this button:\n\n```xml\n<Button\n    style="@style/Widget.App.Button"\n    ...\n/>\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"button"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\button.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\button.stories.jsx"})},"./stories/button.stories.playground.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"ExamplePlayground",(function(){return ExamplePlayground}));__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Button",argTypes:{label:"",variant:{control:{type:"select",options:["small","medium","large"]}},switch:"false",progress:{control:{type:"number",min:0,max:1,step:.2}},size:{control:{type:"range",min:0,max:1,step:.2}},color:{control:{type:"color",presetColors:["red","green"]}},date:{control:{type:"date"}}}};var ExamplePlayground=function ExamplePlayground(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_2__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"button"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};ExamplePlayground.displayName="ExamplePlayground",ExamplePlayground.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_1__.a,{markdown:'\x3c!--docs:\ntitle: "Buttons"\nlayout: detail\nsection: components\nexcerpt: "A customizable button component with updated visual styles."\niconId: materialbutton\npath: /catalog/buttons/\n--\x3e\n\n# Buttons\n\n[Buttons](https://material.io/components/buttons/) allow users to take actions,\nand make choices, with a single tap.\n\n!["Overview"](assets/buttons/buttons_hero.png)\n\n**Contents**\n\n*   [Using buttons](#using-buttons)\n*   [Elevated button](#elevated-button)\n*   [Filled button](#filled-button)\n*   [Filled tonal button](#filled-tonal-button)\n*   [Outlined button](#outlined-button)\n*   [Text button](#text-button)\n*   [Toggle button](#toggle-button)\n*   [Icon button](#icon-button)\n*   [Theming](#theming-buttons)\n\n## Using buttons\n\nBefore you can use Material buttons, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n**Note:** `<Button>` is auto-inflated as\n`<com.google.android.material.button.MaterialButton>` via\n`MaterialComponentsViewInflater` when using a `Theme.Material3.*` theme.\n\n### Making buttons accessible\n\nButtons support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in buttons is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\nFor more information on content labels, go to the\n[Android accessibility help guide](https://support.google.com/accessibility/android/answer/7158690).\n\n### Types\n\nThere are five types of common buttons: 1. [Elevated button](#elevated-button),\n2. [Filled button](#filled-button), 3.\n[Filled tonal button](#filled-tonal-button), 4.\n[Outlined button](#outlined-button), 5. [Text button](#text-button).\n\n[Toggle button](#toggle-button) is an additional pattern using a segmented\ncontainer or icon.\n\n!["Button types - elevated, filled, filled tonal, outlined and text."](assets/buttons/buttons_types.png)\n\n## Elevated button\n\n[Elevated buttons](https://material.io/components/buttons/#elevated-button) are\nessentially outlined buttons with a shadow. To prevent shadow creep, only use\nthem when absolutely necessary, such as when the button requires visual\nseparation from a patterned background.\n\n### Elevated button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows an elevated button with a text label.\n\n!["Elevated button with purple text \'Elevated button\' over a white background."](assets/buttons/elevated-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.ElevatedButton"\n    android:id="@+id/elevatedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Elevated button"\n/>\n```\n\nIn code:\n\n```kt\nelevatedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to an elevated button\n\nThe following example shows an elevated button with an icon.\n\n!["Elevated button with purple text \'Elevated button\', grey border and \'+\' icon\nover a white background."](assets/buttons/elevated-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.ElevatedButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nAn elevated button has a text label, a stroked container and an optional icon.\n\n![Elevated button anatomy diagram](assets/buttons/elevated_button_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `1dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSurface` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ---------------------------------------------\n**Default style** | `Widget.Material3.Button.ElevatedButton`\n**Icon style**    | `Widget.Material3.Button.ElevatedButton.Icon`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Filled button\n\n[Filled button\'s](https://material.io/components/buttons/#filled-button)\ncontrasting surface color makes it the most prominent button after the FAB. It’s\nused for final or unblocking actions in a flow.\n\n**Note** The filled button is the default style if the style is not set.\n\n### Filled button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a filled button with a text label and a filled\ncontainer.\n\n!["Filled button with white text \'Filled button\' and purple container over a\nwhite background."](assets/buttons/filled-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    android:id="@+id/filledButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Filled button"\n/>\n```\n\n**Note:** Since this is the default type, you don\'t need to specify a style tag\nas long as you are using a Material Components Theme. If not, set the style to\n`@style/Widget.Material3.Button`.\n\nIn code:\n\n```kt\nfilledButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a filled button\n\nThe following example shows a filled button with an icon.\n\n!["Filled button with white text \'Filled button\', purple container and \'+\' icon\nover a white background."](assets/buttons/filled-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nA filled button has a text label, a filled container and an optional icon.\n\n![Filled button anatomy diagram](assets/buttons/filled_button_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `2dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnPrimary` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement                   | Style\n------------------------- | -----------------------------------------------\n**Default style**         | `Widget.Material3.Button`\n**Icon style**            | `Widget.Material3.Button.Icon`\n**Unelevated style**      | `Widget.Material3.Button.UnelevatedButton`\n**Unelevated icon style** | `Widget.Material3.Button.UnelevatedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Filled tonal button\n\n[Filled tonal buttons](https://material.io/components/buttons/#filled-tonal-button)\nhave a lighter background color and darker label color, making them less\nvisually prominent than a regular filled button. They’re still used for final or\nunblocking actions in a flow, but may be better when these actions don’t require\nquite so much emphasis.\n\n### Filled tonal button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a filled tonal button with a text label and a filled\ncontainer.\n\n!["Filled tonal button with white text \'Filled tonal button\' and purple\ncontainer over a white background."](assets/buttons/filled-button-tonal.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TonalButton"\n    android:id="@+id/filledTonalButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Filled tonal button"\n/>\n```\n\nIn code:\n\n```kt\nfilledTonalButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a filled tonal button\n\nThe following example shows a filled tonal button with an icon.\n\n!["Filled tonal button with white text \'Filled tonal button\', purple container\nand \'+\' icon over a white\nbackground."](assets/buttons/filled-button-tonal-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TonalButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nA filled tonal button has a text label, a filled container and an optional icon.\n\n![Filled tonal button anatomy diagram](assets/buttons/filled_button_tonal_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSecondaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `?attr/colorSecondaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `2dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSecondaryContainer` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_tonal_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSecondaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------------\n**Default style** | `Widget.Material3.Button.TonalButton`\n**Icon style**    | `Widget.Material3.Button.TonalButton.Icon`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Outlined button\n\n[Outlined buttons](https://material.io/components/buttons/#outlined-button) are\nfor actions that need attention but aren’t the primary action, such as “See all”\nor “Add to cart.” This is also the button used to give someone the opportunity\nto change their mind or escape a flow.\n\n### Outlined button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows an outlined button with a text label and stroked\ncontainer.\n\n!["Outlined button with purple text \'Outlined button\' and grey border over a\nwhite background."](assets/buttons/outlined-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialButtonOutlinedStyle"\n    android:id="@+id/outlinedButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Outlined button"\n/>\n```\n\nIn code:\n\n```kt\noutlinedButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to an outlined button\n\nThe following example shows an outlined button with an icon.\n\n!["Outlined button with purple text \'Outlined button\', grey border and \'+\' icon\nover a white background."](assets/buttons/outlined-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.OutlinedButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nAn outlined button has a text label, a stroked container and an optional icon.\n\n![Outlined button anatomy diagram](assets/buttons/outlined_button_anatomy.png)\n\n1.  Container\n2.  Label text\n3.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `?attr/colorOnSurface` at 12% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_button_outline_color_selector.xml))\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `1dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSurface` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement           | Style\n----------------- | ---------------------------------------------\n**Default style** | `Widget.Material3.Button.OutlinedButton`\n**Icon style**    | `Widget.Material3.Button.OutlinedButton.Icon`\n\nDefault style theme attribute: `?attr/materialButtonOutlinedStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Text button\n\n[Text buttons](https://material.io/components/buttons/#text-button) have less\nvisual prominence, so should be used for low emphasis actions, such as when\npresenting multiple options.\n\n### Text button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a text button with a text label.\n\n!["Text button with purple text \'Text button\' over a white background."](assets/buttons/text-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TextButton"\n    android:id="@+id/textButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="Text button"\n/>\n```\n\nIn code:\n\n```kt\ntextButton.setOnClickListener {\n    // Respond to button press\n}\n```\n\n#### Adding an icon to a text button\n\nThe following example shows a text button with an icon.\n\n!["Text button with purple text \'Text button\' and \'+\' icon over a white\nbackground."](assets/buttons/text-button-icon.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="@style/Widget.Material3.Button.TextButton.Icon"\n    ...\n    app:icon="@drawable/ic_add_24dp"\n/>\n```\n\n### Anatomy and key properties\n\nA text button has a text label, a transparent container and an optional icon.\n\n![Text button anatomy diagram](assets/buttons/text_button_anatomy.png)\n\n1.  Label text\n2.  Icon\n\n#### Text label attributes\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Container attributes\n\nElement          | Attribute             | Related method(s)                                                            | Default value\n---------------- | --------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**        | `app:backgroundTint`  | `setBackgroundColor`<br/>`setBackgroundTintList`<br/>`getBackgroundTintList` | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_background_color_selector.xml))\n**Stroke color** | `app:strokeColor`     | `setStrokeColor`<br/>`setStrokeColorResource`<br/>`getStrokeColor`           | `null`\n**Stroke width** | `app:strokeWidth`     | `setStrokeWidth`<br/>`setStrokeWidthResource`<br/>`getStrokeWidth`           | `0dp`\n**Shape**        | `app:shapeAppearance` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                      | `?attr/shapeAppearanceSmallComponent`\n**Elevation**    | `app:elevation`       | `setElevation`<br/>`getElevation`                                            | `0dp`\n**Ripple color** | `app:rippleColor`     | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`           | `?attr/colorOnSurface` at 16% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_ripple_color_selector.xml))\n\n#### Icon attributes\n\nElement                                         | Attribute         | Related method(s)                                         | Default value\n----------------------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                                        | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                                       | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/color/m3_text_button_foreground_color_selector.xml))\n**Size**                                        | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `wrap_content`\n**Gravity** (position relative to text label)   | `app:iconGravity` | `setIconGravity`<br/>`getIconGravity`                     | `start`\n**Padding** (space between icon and text label) | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `8dp`\n\n#### Styles\n\nElement                | Style\n---------------------- | -----------------------------------------------------\n**Default style**      | `Widget.Material3.Button.TextButton`\n**Icon style**         | `Widget.Material3.Button.TextButton.Icon`\n**Full Width Buttons** | `Widget.Material3.Button.TextButton.Dialog.FullWidth`\n\nDefault style theme attribute: `?attr/borderlessButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Toggle button\n\n[Toggle buttons](https://material.io/components/buttons/#toggle-button) can be\nused to select from a group of choices.\n\nThere are two types of toggle buttons:\n\n*   [Toggle button](#toggle-button)\n*   [Icon](#icon)\n\n### Toggle button\n\nTo emphasize groups of related toggle buttons, a group should share a common\ncontainer.\n\n#### Toggle button examples\n\nAPI and source code:\n\n*   `MaterialButtonToggleGroup`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButtonToggleGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButtonToggleGroup.java)\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows a toggle button with three buttons that have text\nlabels.\n\n!["Toggle button example for Android with text labels - \'Button 1\', \'Button 2\'\nand \'Button 3\' - and grey/purple borders over a white\nbackground."](assets/buttons/toggle-button-text.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    android:id="@+id/toggleButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content">\n    <Button\n        style="?attr/materialButtonOutlinedStyle"\n        android:id="@+id/button1"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 1"\n    />\n    <Button\n        style="?attr/materialButtonOutlinedStyle"\n        android:id="@+id/button2"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 2"\n    />\n    <Button\n        style="?attr/materialButtonOutlinedStyle"\n        android:id="@+id/button3"\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="Button 3"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\nIn code:\n\n```kt\ntoggleButton.addOnButtonCheckedListener { toggleButton, checkedId, isChecked ->\n    // Respond to button selection\n}\n```\n\n#### Implementing an icon-only toggle button\n\nThe following example shows a toggle button with three buttons that have icons.\n\n!["Toggle buttons with icons - heart, add and search - and grey/purple borders\nover a white background."](assets/buttons/toggle-button.png)\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="Widget.App.Button.OutlinedButton.IconOnly" parent="Widget.Material3.Button.OutlinedButton">\n    <item name="iconPadding">0dp</item>\n    <item name="android:insetTop">0dp</item>\n    <item name="android:insetBottom">0dp</item>\n    <item name="android:paddingLeft">12dp</item>\n    <item name="android:paddingRight">12dp</item>\n    <item name="android:minWidth">48dp</item>\n    <item name="android:minHeight">48dp</item>\n</style>\n```\n\nIn the layout:\n\n```xml\n<com.google.android.material.button.MaterialButtonToggleGroup\n    ...>\n    <Button\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n        ...\n        app:icon="@drawable/ic_favorite_24dp"\n    />\n    <Button\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n        ...\n        app:icon="@drawable/ic_add_24dp"\n    />\n    <Button\n        style="@style/Widget.App.Button.OutlinedButton.IconOnly"\n        ...\n        app:icon="@drawable/ic_search_24dp"\n    />\n</com.google.android.material.button.MaterialButtonToggleGroup>\n```\n\n### Anatomy and key properties\n\nA toggle button has a shared stroked container, icons and/or text labels.\n\n![Toggle button anatomy](assets/buttons/toggle_button_anatomy.png)\n\n1.  Container\n2.  Icon\n\n#### Selection attributes\n\nElement                             | Attribute               | Related method(s)                                | Default value\n----------------------------------- | ----------------------- | ------------------------------------------------ | -------------\n**Single selection**                | `app:singleSelection`   | `setSingleSelection`<br/>`isSingleSelection`     | `false`\n**Selection required**              | `app:selectionRequired` | `setSelectionRequired`<br/>`isSelectionRequired` | `false`\n**Enable the group and all children | `android:enabled`       | `setEnabled`<br/>`isEnabled`                     | `true`\n\n#### Styles\n\nElement           | Style\n----------------- | -----------------------------------------------------\n**Default style** | `Widget.Material3.MaterialButtonToggleGroup`\n\nDefault style theme attribute: `?attr/materialButtonToggleGroupStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n### Icon\n\nIcons can be used as toggle buttons when they allow selection, or deselection,\nof a single choice, such as marking an item as a favorite.\n\n#### Icon example\n\nAPI and source code:\n\n*   `CheckBox`\n    *   [Class description](https://developer.android.com/reference/android/widget/CheckBox)\n\n**Note** The `CheckBox` API is just one of several inputs that can implement the\nicon button. See other\n[selection controls](https://material.io/components/selection-controls/) for\nmore details.\n\nThe following example shows an icon that can be used independently or in items\nof a `RecyclerView`.\n\n![Toggle icon example showing 4 images, heart icon in the upper-right corner of\neach image](assets/buttons/android_toggle_button.png)\n\nIn the layout:\n\n```xml\n<CheckBox\n    android:id="@+id/icon"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:button="@drawable/sl_favourite_24dp"\n    app:buttonTint="@android:color/white"\n/>\n```\n\nIn `res/drawable/sl_favourite_24dp.xml`:\n\n```xml\n<selector>\n    <item\n        android:drawable="@drawable/ic_favourite_outlined_24dp"\n        android:state_checked="false"\n    />\n    <item\n        android:drawable="@drawable/ic_favourite_filled_24dp"\n        android:state_checked="true"\n    />\n    <item android:drawable="@drawable/ic_favourite_outlined_24dp" />\n</selector>\n```\n\nIn code:\n\n```kt\nicon.setOnCheckedChangeListener { checkBox, isChecked ->\n    // Respond to icon toggle\n}\n```\n\n## Icon button\n\n[Icon buttons](https://material.io/components/buttons/#icon-buttons) help users\ntake supplementary actions with a single tap. There are two types of icon\nbuttons: standard and contained.\n\n*   **Standard icon button:** By default icon buttons will not have a container.\n*   **Contained icon button:** Optionally, it is possible to have a container\n    around the icon.\n\nSee [Icon button examples](#icon-button-examples) section below for more\ninformation.\n\n### Usage\n\n*   Icon buttons should be used when a compact button is required, such as in a\n    toolbar.\n*   Icon buttons can take the form of a wide range of system icons.\n*   Ensure the meaning of the icon is unambiguous.\n*   Ensure that the tooltip describes the button’s action, rather than\n    the icon.\n\n#### Icon button examples\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\n#### Standard Icon button\n\nThe following example shows a standard icon button.\n\n!["Standard icon button example for Android over a white background."](assets/buttons/icon-button-standard.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\nIn code:\n\n```kt\niconButton.addOnButtonCheckedListener { iconButton, checkedId, isChecked ->\n    // Respond to button selection\n}\n```\n\n#### Filled Icon button\n\nThe following example shows a contained icon button that is filled.\n\n!["Filled icon button example for Android over a white background."](assets/buttons/filled-icon-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonFilledStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\n#### Filled Tonal Icon button\n\nThe following example shows a tonal icon button.\n\n!["Filled tonal icon button example for Android over a white background."](assets/buttons/filled-tonal-icon-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonFilledTonalStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\n#### Outlined Icon button\n\nThe following example shows an outlined icon button.\n\n!["Outlined icon button example for Android over a white background."](assets/buttons/outlined-icon-button.png)\n\nIn the layout:\n\n```xml\n<Button\n    style="?attr/materialIconButtonOutlinedStyle"\n    android:id="@+id/iconButton"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n/>\n```\n\n#### Styles & Theme attributes\n\nElement                      | Style                                             | Theme Attribute\n---------------------------- | ------------------------------------------------- | ---------------\n**Default style**            | `Widget.Material3.Button.IconButton`              | `?attr/materialIconButtonStyle`\n**Filled Icon Button**       | `Widget.Material3.Button.IconButton.Filled`       | `?attr/materialIconButtonFilledStyle`\n**Filled Tonal Icon Button** | `Widget.Material3.Button.IconButton.Filled.Tonal` | `?attr/materialIconButtonFilledTonalStyle`\n**Outlined Icon Button**     | `Widget.Material3.Button.IconButton.Outlined`     | `?attr/materialIconButtonOutlinedStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/res/values/attrs.xml).\n\n## Theming buttons\n\nButtons support\n[Material Theming](https://material.io/components/buttons/#theming) and can be\ncustomized in terms of color, typography and shape.\n\n### Button theming example\n\nAPI and source code:\n\n*   `MaterialButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/button/MaterialButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/button/MaterialButton.java)\n\nThe following example shows text, outlined and filled button types with\nMaterial Theming.\n\n!["Button theming with three buttons - text, outlined and filled - with pink\ncolor theming and cut corners."](assets/buttons/button-theming.png)\n\n#### Implementing button theming\n\nUse theme attributes and styles in `res/values/styles.xml` to add the theme to\nall buttons. This affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="textAppearanceLabelLarge">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="TextAppearance.App.Button" parent="TextAppearance.Material3.LabelLarge">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.Material3.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nUse default style theme attributes, styles and theme overlays. This adds the\ntheme to all buttons but does not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="borderlessButtonStyle">@style/Widget.App.Button.TextButton</item>\n    <item name="materialButtonOutlinedStyle">@style/Widget.App.Button.OutlinedButton</item>\n    <item name="materialButtonStyle">@style/Widget.App.Button</item>\n</style>\n\n<style name="Widget.App.Button.TextButton" parent="Widget.Material3.Button.TextButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button.OutlinedButton" parent="Widget.Material3.Button.OutlinedButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button.TextButton</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="Widget.App.Button" parent="Widget.Material3.Button">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Button</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.Button</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="ThemeOverlay.App.Button.TextButton" parent="">\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n</style>\n\n<style name="ThemeOverlay.App.Button" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n</style>\n```\n\nUse one of the styles in the layout. That will affect only this button:\n\n```xml\n<Button\n    style="@style/Widget.App.Button"\n    ...\n/>\n```\n'})}}},ExamplePlayground.args={label:"Default",variant:"small",switch:!1,color:"[object Object]",date:"[object Object]"},ExamplePlayground.__docgenInfo={description:"",methods:[],displayName:"ExamplePlayground"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\button.stories.playground.jsx"]={name:"ExamplePlayground",docgenInfo:ExamplePlayground.__docgenInfo,path:"stories\\button.stories.playground.jsx"})},"./stories/card.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Card"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"card"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Cards"\nlayout: detail\nsection: components\nexcerpt: "Cards display content and actions on a single subject."\niconId: card\npath: /catalog/cards/\n--\x3e\n\n# Cards\n\n[Cards](https://material.io/components/cards/) contain content and actions about\na single subject.\n\n!["Cards with text, numbers, graph, and a chart"](assets/cards/cards_hero.png)\n\n**Contents**\n\n*   [Using cards](#using-cards)\n*   [Card](#card)\n*   [Theming](#theming-cards)\n\n## Using cards\n\nBefore you can use a Material card, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\nCards support [checking](#making-a-card-checkable) and\n[dragging](#making-a-card-draggable), but those behaviors are not implemented by\ndefault.\n\n### Making cards accessible\n\nThe contents within a card should follow their own accessibility guidelines,\nsuch as images having content descriptions set on them.\n\nIf you have a draggable card, you should set an\n[`AccessibilityDelegate`](https://developer.android.com/reference/android/view/View.AccessibilityDelegate)\non it, so that the behavior can be accessible via screen readers such as\nTalkBack. See the [draggable card section](#making-a-card-draggable) below for\nmore info.\n\n### Making a card checkable\n\n![Outlined card with a checked button and a light purple overlay; secondary\ntitle and Action 1 and Action 2 buttons](assets/cards/cards_checked.png)\n\nWhen a card is checked, it will show a checked icon and change its foreground\ncolor. There is no default behavior for enabling/disabling the checked state. An\nexample of how to do it in response to a long click is shown below.\n\nIn the layout:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    android:clickable="true"\n    android:focusable="true"\n    android:checkable="true">\n\n    ...\n\n</com.google.android.material.card.MaterialCardView>\n```\n\nIn code:\n\n```kt\ncard.setOnLongClickListener {\n    card.setChecked(!card.isChecked)\n    true\n}\n```\n\n### Making a card draggable\n\n![Outlined card with a light grey overlay; secondary title and Action 1 and\nAction 2 buttons, being dragged](assets/cards/cards_dragged.png)\n\nCards have an `app:state_dragged` with foreground and elevation changes to\nconvey motion. We recommend using\n[`ViewDragHelper`](https://developer.android.com/reference/androidx/customview/widget/ViewDragHelper)\nto set the dragged state:\n\n```kt\nprivate inner class ViewDragHelperCallback : ViewDragHelper.Callback() {\n\n    override fun onViewCaptured(capturedChild: View, activePointerId: Int) {\n        if (capturedChild is MaterialCardView) {\n            (view as MaterialCardView).setDragged(true)\n        }\n    }\n\n    override fun onViewReleased(releaseChild: View, xVel: Float, yVel: Float) {\n        if (releaseChild is MaterialCardView) {\n            (view as MaterialCardView).setDragged(false)\n        }\n    }\n}\n```\n\nAlternatively, the\n[Material Catalog](https://github.com/material-components/material-components-android/tree/master/catalog/java/io/material/catalog/card)\nhas an implementation example that you can copy, which uses a custom class\ncalled\n[`DraggableCoordinatorLayout`](https://github.com/material-components/material-components-android/tree/master/catalog/java/io/material/catalog/draggable/DraggableCoordinatorLayout.java).\nIt is used as the parent container in the layout:\n\nIn the layout:\n\n```xml\n<io.material.catalog.draggable.DraggableCoordinatorLayout\n    android:id="@+id/parentContainer"\n    ...>\n\n    <com.google.android.material.card.MaterialCardView\n        ...>\n\n        ...\n\n    </com.google.android.material.card.MaterialCardView>\n\n</io.material.catalog.draggable.DraggableCoordinatorLayout>\n```\n\nIn code:\n\n```kt\nparentContainer.addDraggableChild(card)\n\nparentContainer.setViewDragListener(object : DraggableCoordinatorLayout.ViewDragListener {\n\n    override fun onViewCaptured(view: View, pointerId: Int) {\n        card.isDragged = true\n    }\n\n    override fun onViewReleased(view: View, vX: Float, vY: Float) {\n        card.isDragged = false\n    }\n})\n```\n\nFinally, make sure the behavior is accessible by setting an\n[`AccessibilityDelegate`](https://developer.android.com/reference/android/view/View.AccessibilityDelegate)\non the card. The code below demonstrates how to allow the user to move the card\nto two different positions on the screen.\n\n```kt\nprivate val cardDelegate = object : AccessibilityDelegate() {\n    override fun onInitializeAccessibilityNodeInfo(host: View, info: AccessibilityNodeInfo) {\n        super.onInitializeAccessibilityNodeInfo(host, info)\n\n        val layoutParams = card!!.layoutParams as CoordinatorLayout.LayoutParams\n        val gravity = layoutParams.gravity\n        val isOnTop = gravity and Gravity.TOP == Gravity.TOP\n        val isOnBottom = gravity and Gravity.BOTTOM == Gravity.BOTTOM\n\n        if (!isOnTop) {\n            info.addAction(AccessibilityAction(R.id.move_card_top_action, getString(R.string.card_action_move_top)))\n        }\n        if (!isOnBottom) {\n            info.addAction(AccessibilityAction(R.id.move_card_bottom_action, getString(R.string.card_action_move_bottom)))\n        }\n    }\n\n    override fun performAccessibilityAction(host: View, action: Int, arguments: Bundle): Boolean {\n        val gravity: Int\n        if (action == R.id.move_card_top_action) {\n            gravity = Gravity.TOP\n        } else if (action == R.id.move_card_bottom_action) {\n            gravity = Gravity.BOTTOM\n        } else {\n            return super.performAccessibilityAction(host, action, arguments)\n        }\n\n        val layoutParams = card!!.layoutParams as CoordinatorLayout.LayoutParams\n        if (layoutParams.gravity != gravity) {\n            layoutParams.gravity = gravity\n            card!!.requestLayout()\n        }\n\n        return true\n    }\n}\n```\n\n**Note:** Cards also support a swipe-to-dismiss behavior through the use of\n[\'SwipeDismissBehavior\'](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/behavior/SwipeDismissBehavior.java).\nYou can see an example\n[here](https://github.com/material-components/material-components-android/tree/master/catalog/java/io/material/catalog/card/CardSwipeDismissFragment.java).\n\n## Card\n\nOn mobile, an outlined or a filled\n[card’s](https://material.io/components/cards/#specs) default elevation is\n`0dp`, with a raised dragged elevation of `8dp`. The Material Android library\nalso provides an elevated card style, which has an elevation of `1dp`, with a\nraised dragged elevation of `2dp`.\n\n![Outlined card with a secondary title and Action 1 and Action 2 buttons in\npurple](assets/cards/cards_basic.png)\n\n### Card examples\n\nAPI and source code:\n\n*   `MaterialCardView`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/card/MaterialCardView)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/MaterialCardView.java)\n\n**Note:** You don\'t need to specify a style tag as long as you are using a\nMaterial Components Theme. If not, set the style to\n`Widget.Material3.CardView.Outlined`, `Widget.Material3.CardView.Filled` or\n`Widget.Material3.CardView.Elevated`.\n\n#### Outlined card\n\nThe following example shows an outlined card.\n\n!["Outlined card with photo, a title, a secondary title, text, and Action 1 and\nAction 2 buttons in purple"](assets/cards/cards_outlined.png)\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    android:id="@+id/card"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:layout_margin="8dp">\n\n    <LinearLayout\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:orientation="vertical">\n\n        \x3c!-- Media --\x3e\n        <ImageView\n            android:layout_width="match_parent"\n            android:layout_height="194dp"\n            app:srcCompat="@drawable/media"\n            android:scaleType="centerCrop"\n            android:contentDescription="@string/content_description_media"\n            />\n\n        <LinearLayout\n            android:layout_width="match_parent"\n            android:layout_height="wrap_content"\n            android:orientation="vertical"\n            android:padding="16dp">\n\n            \x3c!-- Title, secondary and supporting text --\x3e\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:text="@string/title"\n                android:textAppearance="?attr/textAppearanceTitleMedium"\n                />\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_marginTop="8dp"\n                android:text="@string/secondary_text"\n                android:textAppearance="?attr/textAppearanceBodyMedium"\n                android:textColor="?android:attr/textColorSecondary"\n                />\n            <TextView\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_marginTop="16dp"\n                android:text="@string/supporting_text"\n                android:textAppearance="?attr/textAppearanceBodyMedium"\n                android:textColor="?android:attr/textColorSecondary"\n                />\n\n        </LinearLayout>\n\n        \x3c!-- Buttons --\x3e\n        <LinearLayout\n            android:layout_width="wrap_content"\n            android:layout_height="wrap_content"\n            android:layout_margin="8dp"\n            android:orientation="horizontal">\n            <com.google.android.material.button.MaterialButton\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:layout_marginEnd="8dp"\n                android:text="@string/action_1"\n                style="?attr/borderlessButtonStyle"\n                />\n            <com.google.android.material.button.MaterialButton\n                android:layout_width="wrap_content"\n                android:layout_height="wrap_content"\n                android:text="@string/action_2"\n                style="?attr/borderlessButtonStyle"\n                />\n        </LinearLayout>\n\n    </LinearLayout>\n\n</com.google.android.material.card.MaterialCardView>\n```\n\n#### Filled card\n\nThe following example shows an filled card.\n\n!["Filled card with a photo, title, a secondary title, text, and Action 1 and\nAction 2 buttons in purple"](assets/cards/cards_filled.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    style="?attr/materialCardViewFilledStyle">\n\n    ...\n\n</com.google.android.material.card.MaterialCardView>\n```\n\n#### Elevated card\n\nThe following example shows an elevated card.\n\n!["Elevated card with a photo, title, a secondary title, text, and Action 1 and\nAction 2 buttons in purple"](assets/cards/cards_elevated.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    style="?attr/materialCardViewElevatedStyle">\n\n    ...\n\n</com.google.android.material.card.MaterialCardView>\n```\n\n### Anatomy and key properties\n\nA card has a container and an optional thumbnail, header text, secondary text,\nmedia, supporting text, buttons and icons.\n\n![card anatomy diagram](assets/cards/card_anatomy.png)\n\n1.  Container\n2.  Headline\n3.  Subhead\n4.  Supporting text\n5.  Image\n6.  Buttons\n\n**Note:** All the optional elements of a card\'s content (with the exception of\nthe checked icon) are implemented through the use of other views/components, as\nshown in the [card examples](#card-examples) section.\n\n#### Container attributes\n\nElement              | Attribute                 | Related method(s)                                                   | Default value\n-------------------- | ------------------------- | ------------------------------------------------------------------- | -------------\n**Color**            | `app:cardBackgroundColor` | `setCardBackgroundColor`<br/>`getCardBackgroundColor`               | `?attr/colorSurface` or `?attr/colorSurfaceVariant` (filled style)\n**Foreground color** | `app:cardForegroundColor` | `setCardForegroundColor`<br/>`getCardForegroundColor`               | `@android:color/transparent` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/color/m3_card_foreground_color.xml))\n**Stroke color**     | `app:strokeColor`         | `setStrokeColor`<br/>`getStrokeColor`<br/>`getStrokeColorStateList` | `?attr/colorOutline` (unchecked)<br/>`?attr/colorSecondary` (checked)\n**Stroke width**     | `app:strokeWidth`         | `setStrokeWidth`<br/>`getStrokeWidth`                               | `1dp` (outlined style)<br/>`0dp` (elevated or filled style)\n**Shape**            | `app:shapeAppearance`     | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`             | `?attr/shapeAppearanceMediumComponent`\n**Elevation**        | `app:cardElevation`       | `setCardElevation`<br/>`setCardMaxElevation`                        | `0dp` (outlined or filled style)<br/>`1dp` (elevated style)\n**Ripple color**     | `app:rippleColor`         | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`  | `?attr/colorOnSurfaceVariant` at 20% opacity (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/color/m3_card_ripple_color.xml))\n\n**Note:** We recommend that cards on mobile have `8dp` margins.\n`android:layout_margin` will [**NOT**](https://stackoverflow.com/a/13365288)\nwork in default styles (for example `materialCardViewStyle`) so either set this\nattr directly on a `MaterialCardView` in the layout or add it to a style that is\napplied in the layout with `style="@style/...`.\n\n**Note:** Without an `app:strokeColor`, the card will not render a stroked\nborder, regardless of the `app:strokeWidth` value.\n\n#### Checked icon attributes\n\nElement       | Attribute            | Related method(s)                                                                    | Default value\n------------- | -------------------- | ------------------------------------------------------------------------------------ | -------------\n**Icon**      | `checkedIcon`        | `setCheckedIcon`<br/>`setCheckedIconResource`<br/>`getCheckedIcon`                   | [`@drawable/ic_mtrl_checked_circle.xml`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/resources/res/drawable/ic_mtrl_checked_circle.xml)\n**Color**     | `checkedIconTint`    | `setCheckedIconTint`<br/>`getCheckedIconTint`                                        | `?attr/colorOutline` (unchecked)<br/>`?attr/colorSecondary` (checked)\n**Checkable** | `android:checkable`  | `setCheckable`<br/>`isCheckable`                                                     | `false`\n**Size**      | `checkedIconSize`    | `setCheckedIconSize`<br/>`setCheckedIconSizeResource`<br/>`getCheckedIconSize`       | `24dp`\n**Margin**    | `checkedIconMargin`  | `setCheckedIconMargin`<br/>`setCheckedIconMarginResource`<br/>`getCheckedIconMargin` | `8dp`\n**Gravity**   | `checkedIconGravity` | `setCheckedIconGravity`<br/>`getCheckedIconGravity`                                  | `TOP_END`\n\n#### States\n\nCards can have the following states:\n\nState                                 | Description                         | Related method(s)\n------------------------------------- | ----------------------------------- | -----------------\n**Default**                           | Card is not checked and not dragged | N/A\n**Checked** (`android:state_checked`) | `true` if a card is checked         | `setChecked`<br/>`setOnCheckedChangeListener`<br/>`isChecked`\n**Dragged** (`app:state_dragged`)     | `true` when a card is being dragged | `setDragged`<br/>`isDragged`\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------\n**Default style** | `Widget.Material3.CardView.Outlined`\n\nDefault style theme attribute: `?attr/materialCardViewStyle`\n\nAdditional style theme attributes: `?attr/materialCardViewOutlinedStyle`,\n`?attr/materialCardViewFilledStyle`, `?attr/materialCardViewElevatedStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/values/styles.xml)\nand\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/res/values/attrs.xml).\n\n## Theming cards\n\nA card supports\n[Material Theming](https://material.io/components/cards/#theming) and can be\ncustomized in terms of color, typography and shape.\n\n### Card theming example\n\nAPI and source code\n\n*   `MaterialCardView`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/card/MaterialCardView)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/card/MaterialCardView.java)\n\nThe following example shows a card with Material Theming.\n\n![Card with Shrine theme with photo, title, secondary title, text and Action 1\nand 2 buttons in black](assets/cards/cards_theming.png)\n\n#### Implementing card theming\n\nUse theme attributes and a style in `res/values/styles.xml` to apply the theme\nto all cards. This will affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurfaceVariant">@color/shrine_pink_900</item>\n    <item name="shapeAppearanceMediumComponent">@style/ShapeAppearance.App.MediumComponent</item>\n</style>\n\n<style name="ShapeAppearance.App.MediumComponent" parent="ShapeAppearance.Material3.MediumComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">8dp</item>\n</style>\n```\n\nUse a default style theme attribute, styles and a theme overlay. This applies a\ntheme to all cards but does not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="materialCardViewStyle">@style/Widget.App.CardView</item>\n</style>\n\n<style name="Widget.App.CardView" parent="Widget.Material3.CardView.Elevated">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Card</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.MediumComponent</item>\n</style>\n\n<style name="ThemeOverlay.App.Card" parent="">\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurfaceVariant">@color/shrine_pink_900</item>\n</style>\n```\n\nUse the style in the layout. This affects only this specific card:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    style="@style/Widget.App.CardView"\n/>\n```\n\nIn order to optimize shape theming, some (optional) adjustments need to be made\nto the card layout to incorporate\n[ShapeableImageView](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/imageview/ShapeableImageView.java).\n\nIn the layout:\n\n```xml\n<com.google.android.material.card.MaterialCardView\n    ...\n    app:cardPreventCornerOverlap="false">\n\n    ...\n\n        \x3c!-- Media --\x3e\n        <com.google.android.material.imageview.ShapeableImageView\n            ...\n            app:shapeAppearance="?attr/shapeAppearanceMediumComponent"\n            app:shapeAppearanceOverlay="@style/ShapeAppearanceOverlay.App.Card.Media"\n            />\n\n</com.google.android.material.card.MaterialCardView>\n```\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="ShapeAppearanceOverlay.App.Card.Media" parent="">\n    <item name="cornerSizeBottomLeft">0dp</item>\n    <item name="cornerSizeBottomRight">0dp</item>\n</style>\n```\n\n**Note:** In order to apply a theme to card contents (text, buttons, etc.), the\nrelevant styles/attributes for these components need to be included. For more\ninformation, see the article on\n[buttons](https://material.io/develop/android/components/buttons/).\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"card"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\card.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\card.stories.jsx"})},"./stories/chips.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Chips"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"chips"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Material chips"\nlayout: detail\nsection: components\nexcerpt: "Chips are compact elements that represent an input, attribute, or action."\niconId: chip\npath: /catalog/chips/\n--\x3e\n\n# Chips\n\n[Chips](https://material.io/components/chips) are compact elements that\nrepresent an input, attribute, or action.\n\n![Email with and grey chip with an email address on the "To" line](assets/chips/chips_hero.png)\n\n**Contents**\n\n*   [Using chips](#using-chips)\n*   [Assist chip](#assist-chip)\n*   [Filter chip](#filter-chip)\n*   [Input chip](#input-chip)\n*   [Suggestion chip](#suggestion-chip)\n*   [Theming chips](#theming-chips)\n\n## Using chips\n\nBefore you can use Material chips, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\nChips allow users to enter information, make selections, filter content, or\ntrigger actions. While buttons are expected to appear consistently and with\nfamiliar calls to action, chips should appear dynamically as a group of multiple\ninteractive elements.\n\n### Usage\n\nA `Chip` can be added in a layout with the following:\n\n```xml\n<com.google.android.material.chip.Chip\n    android:id="@+id/chip"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:text="@string/text"/>\n```\n\nChanges to a chip can be observed with the following:\n\n```kt\nchip.setOnClickListener {\n   // Responds to chip click\n}\n\nchip.setOnCloseIconClickListener {\n    // Responds to chip\'s close icon click if one is present\n}\n\nchip.setOnCheckedChangeListener { chip, isChecked ->\n    // Responds to chip checked/unchecked\n}\n```\n\n### Making chips accessible\n\nChips support content labeling for accessibility and are readable by most screen\nreaders, such as TalkBack. Text rendered in chips is automatically provided to\naccessibility services. Additional content labels are usually unnecessary.\n\n#### Touch target\n\nThe `Widget.Material3.Chip.*` styles use an\n[InsetDrawable](https://developer.android.com/reference/android/graphics/drawable/InsetDrawable)\nto extend the chip\'s touch target when necessary to meet Android\'s recommended\n[accessibility touch target size](https://support.google.com/accessibility/android/answer/7101858).\nDevelopers can override a chip\'s minimum touch target size using\n`app:chipMinTouchTargetSize`. Developers can set whether the chip should extend\nits bounds to meet the minimum touch target using `app:ensureMinTouchTargetSize`\n(true by default).\n\n#### RTL-friendly chip layout\n\nCall `setLayoutDirection(int)` with `View.LAYOUT_DIRECTION_LOCALE` to ensure\nthat the chip\'s ancestor `TextView` renders the text with proper paddings.\nWithout this, the initial rendering may look like the text has its padding set\naccording to LTR direction.\n\n```kt\nchip.layoutDirection = View.LAYOUT_DIRECTION_LOCALE\n```\n\n### Grouping chips with `ChipGroup`\n\nChips are most commonly used in groups. We recommend using `ChipGroup` because\nit is purpose-built to handle multi-chip layouts and behavior patterns, as\nopposed to a `ViewGroup` such as `RecyclerView`. A `ChipGroup` contains a set of\n`Chip`s and manages their layout and multiple-exclusion scope, similarly to a\n`RadioGroup`.\n\n#### Layout Mode\n\nA `ChipGroup` rearranges chips across multiple rows by default.\n\n!["6 white "Filter" chips spread across 2 lines: "Filters" 1 and 3 selected and\nare light purple and include checkmarks."](assets/chips/chips_filter.png)\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    android:id="@+id/chipGroup"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content">\n\n  \x3c!-- Chips can be declared here, or added dynamically. --\x3e\n\n</com.google.android.material.chip.ChipGroup>\n```\n\nA `ChipGroup` can also constrain its chips to a single row using the\n`app:singleLine` attribute. Using a single row may necessitate wrapping the\n`ChipGroup` with a `HorizontalScrollView`.\n\n!["Single line of white chips: chips 1, 2, and 3 are fully visible, chip 4 is\npartly visible"](assets/chips/chips_singleline.png)\n\n```xml\n<HorizontalScrollView\n    ... >\n  <com.google.android.material.chip.ChipGroup\n      ...\n      app:singleLine="true">\n\n    \x3c!-- Chips can be declared here, or added dynamically. --\x3e\n\n  </com.google.android.material.chip.ChipGroup>\n</HorizontalScrollView>\n```\n\n#### Chip spacing\n\nA `ChipGroup` can insert spacing between chips in a row or between rows of chips\nusing the `app:chipSpacing` attribute. Different horizontal and vertical spacing\ncan be set using the `app:chipSpacingHorizontal` and `app:chipSpacingVertical`\nattributes.\n\n**Note:** The `app:chipMinTouchTargetSize` will overrule vertical chip spacing\nfor lower amounts.\n\nThe following image shows a group of chips with\n`app:chipSpacingHorizontal="42dp"`.\n\n!["6 white chips in 2 rows with 42dp horizontal spacing"](assets/chips/chips_spacing.png)\n\n#### Multiple exclusion scope\n\nThe `app:singleSelection` attribute can be set to true on a `ChipGroup` in order\nto toggle single-select and multi-select behaviors of child chips.\n\nThe `app:selectionRequired` attribute can be set to true on a `ChipGroup` to\nprevent all child chips from being deselected - at least one option should be\nchosen.\n\n#### Handling checked chips\n\nChanges to child chip\'s checked/unchecked state can be observed with the\nfollowing:\n\n```kt\nval checkedChipId = chipGroup.checkedChipId // Returns View.NO_ID if singleSelection = false\nval checkedChipIds = chipGroup.checkedChipIds // Returns a list of the selected chips\' IDs, if any\n\nchipGroup.setOnCheckedChangeListener { group, checkedId ->\n    // Responds to child chip checked/unchecked\n}\n```\n\n### Standalone `ChipDrawable`\n\nA standalone `ChipDrawable` can be used in contexts that require a `Drawable`.\nThe most obvious use case is in text fields that "chipify" contacts, commonly\nfound in communications apps.\n\nTo use a `ChipDrawable`, first create a chip resource in `res/xml`. Note that\nyou must use the `<chip` tag in your resource file.\n\nIn `res/xml/standalone_chip.xml`:\n\n```xml\n<chip\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    xmlns:app="http://schemas.android.com/apk/res-auto"\n    app:chipIcon="@drawable/ic_chip"\n    android:text="@string/text"/>\n```\n\nInput Chip is the default Material style for standalone `ChipDrawable`s, but you\ncan apply any of the other styles using the `style` attribute. All the\nattributes on `Chip` can be applied to a `ChipDrawable` resource.\n\nA ChipDrawable can then be inflated from this resource with the following:\n\n```xml\nval chipDrawable = ChipDrawable.createFromResource(context, R.xml.chip)\n```\n\nFor example, consider an editable e-mail address field that converts addresses\nto chips as they are typed and validated. We can combine `ChipDrawable` with\nspans to add a chip to an `EditText`:\n\n!["Standalone chip inside a text field"](assets/chips/chips_standalone.png)\n\n```kt\nchip.setBounds(0, 0, chip.intrinsicWidth, chip.intrinsicHeight)\nval span = ImageSpan(chip)\nval text = editText.text!!\ntext.setSpan(span, 0, text.length, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE)\n```\n\n### Types\n\nThere are four types of chips: 1. [assist](#assist-chip), 2.\n[filter](#filter-chip), 3. [input](#input-chip),\n4.[suggestion](#suggestion-chip)\n\n![Examples of the four different chip types](assets/chips/chip_types.png)\n\nAPI and source code:\n\n*   `Chip`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/Chip)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/Chip.java)\n*   `ChipGroup`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipGroup.java)\n*   `ChipDrawable`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipDrawable)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipDrawable.java)\n\n## Assist chip\n\nAssist chips represent smart or automated actions that can span multiple apps,\nsuch as opening a calendar event from the home screen. Assist chips function as\nthough the user asked an assistant to complete the action.\n\n### Assist chip example\n\nThe following example shows an activated assist chip.\n\n!["A selected action chip with its corresponding action, a visible popup textbox\nstating the chip has been activated."](assets/chips/chips_selected_assist.png)\n\nIn the layout:\n\n```xml\n<TextView\n  android:id="@+id/textView_1"\n  android:layout_width="wrap_content"\n  android:layout_height="wrap_content"\n  android:text="@string/label_1"\n  android:textAlignment="viewEnd"/>\n\n<com.google.android.material.chip.Chip\n  android:id="@+id/chip_1"\n  style="@style/Widget.Material3.Chip.Assist"\n  android:layout_width="wrap_content"\n  android:layout_height="wrap_content"\n  android:text="@string/chip_text_1"\n  app:chipIcon="@drawable/circle_1"\n  app:ensureMinTouchTargetSize="true"/>\n```\n\n## Filter chip\n\nFilter chips use tags or descriptive words to filter content.\n\nFilter chips clearly delineate and display options in a compact area. They are a\ngood alternative to toggle buttons or checkboxes.\n\n### Filter chip example\n\nThe following example shows filter chips.\n\n!["6 white "Filter" chips spread across 2 lines: "Filters" 1 and 3 selected and\nare light purple and include checkmarks."](assets/chips/chips_filter.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    ...>\n  <com.google.android.material.chip.Chip\n      android:id="@+id/chip_1"\n      style="@style/Widget.Material3.Chip.Filter"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:checked="true"\n      android:text="@string/text_filter_1"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n       style="@style/Widget.Material3.Chip.Filter"\n       android:text="@string/text_filter_2"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.Material3.Chip.Filter"\n      android:checked="true"\n      android:text="@string/text_filter_3"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.Material3.Chip.Filter"\n      android:text="@string/text_filter_4"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.Material3.Chip.Filter"\n      android:text="@string/text_filter_5"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.Material3.Chip.Filter"\n      android:text="@string/text_filter_6"/>\n\n</com.google.android.material.chip.ChipGroup>\n```\n\n## Input chip\n\nInput chips represent a discrete piece of information in compact form, such as\nan entity (person, place, or thing) or text. They enable user input and verify\nthat input by converting text into chips.\n\n### Input chip example\n\nThe following example shows input chips.\n\n!["Input chips with texts Input 1 to 6."](assets/chips/chips_input.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    ...>\n  <com.google.android.material.chip.Chip\n      android:id="@+id/chip_1"\n      style="@style/Widget.Material3.Chip.Input"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:text="@string/text_input_1"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.Material3.Chip.Input"\n      android:text="@string/text_input_2"/>\n\n  <com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.Material3.Chip.Input"\n      android:text="@string/text_input_3"/>\n\n</com.google.android.material.chip.ChipGroup>\n```\n\n## Suggestion chip\n\nSuggestion chips help narrow a user’s intent by presenting dynamically generated\nsuggestions, such as offering possible responses or providing search filters.\n\n### Suggestion chip example\n\nThe following example shows suggestion chips.\n\n!["3 suggestion chips, where suggestion 1 is unselected with a solid border and\nwhite background, suggestion 2 is selected with no border and a light purple\nbackground, and suggestion 3 is an unselected elevated suggestion with no border\nand a light grey background."](assets/chips/chips_suggestion.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.chip.ChipGroup\n    ...>\n   <com.google.android.material.chip.Chip\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    style="@style/Widget.Material3.Chip.Suggestion"\n    android:text="@string/chip_text_1"/>\n  <com.google.android.material.chip.Chip\n    ...\n    style="@style/Widget.Material3.Chip.Suggestion"\n    android:text="@string/chip_text_2"/>\n  <com.google.android.material.chip.Chip\n    ...\n    style="@style/Widget.Material3.Chip.Suggestion.Elevated"\n    android:text="@string/chip_text_3"/>\n\n</com.google.android.material.chip.ChipGroup>\n```\n\n### Anatomy and key properties\n\nThe following is an anatomy diagram of a chip:\n\n![Chip anatomy diagram](assets/chips/chips_anatomy.png)\n\n1.  Container\n1.  Text\n1.  Remove icon (optional)\n1.  Thumbnail (optional)\n\n#### Container attributes\n\nElement              | Attribute                                                       | Related method(s)                                                                                          | Default value\n-------------------- | --------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- | -------------\n**Color**            | `app:chipBackgroundColor`                                       | `setChipBackgroundColor`<br/>`setChipBackgroundColorResource`<br/>`getChipBackgroundColor`                 | `?attr/colorOnSurface`\n**Ripple color**     | `app:rippleColor`                                               | `setRippleColor`<br/>`setRippleColorResource`<br/>`getRippleColor`                                         | `?attr/colorOnSecondaryContainer` at 12%\n**Stroke width**     | `app:chipStrokeWidth`                                           | `setStrokeWidth`<br/>`setChipStrokeWidthResource`<br/>`getChipStrokeWidth`                                 | `1dp`\n**Stroke color**     | `app:chipStrokeColor`                                           | `setStrokeColor`<br/>`setChipStrokeColorResource`<br/>`getChipStrokeColor`                                 | `?attr/colorOnSurface`\n**Min height**       | `app:chipMinHeight`                                             | `setChipMinHeight`<br/>`setChipMinHeightResource`<br/>`getChipMinHeight`                                   | `32dp`\n**Padding**          | `app:chipStartPadding`<br/>`app:chipEndPadding`                 | `setChip*Padding`<br/>`setChip*PaddingResource`<br/>`getChip*Padding`                                      | `4dp` (start)<br/>`6dp` (end)\n**Shape**            | `app:shapeAppearance`<br/>`shapeAppearanceOverlay`              | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                                                    | `?attr/shapeAppearanceSmallComponent` with 8dp `cornerSize`\n**Min touch target** | `app:chipMinTouchTargetSize`<br/>`app:ensureMinTouchTargetSize` | `ensureAccessibleTouchTarget`<br/>`setEnsureAccessibleTouchTarget`<br/>`shouldEnsureAccessibleTouchTarget` | `48dp`<br/>`true`\n**Checkable**        | `android:checkable`                                             | `setCheckable`<br/>`setCheckableResource`<br/>`isCheckable`                                                | `true` (input, suggestion, filter)\n\n#### Thumbnail attributes\n\n**Chip icon**\n\nElement        | Attribute                                       | Related method(s)                                                     | Default value\n-------------- | ----------------------------------------------- | --------------------------------------------------------------------- | -------------\n**Icon**       | `app:chipIcon`                                  | `setChipIconVisible`<br/>`isChipIconVisible`                          | `null`\n**Visibility** | `app:chipIconVisible`                           | `setChipIcon`<br/>`setChipIconResource`<br/>`getChipIcon`             | `true` (input and assist)\n**Color**      | `app:chipIconTint`                              | `setChipIconTint`<br/>`setChipIconTintResource`<br/>`getChipIconTint` | `null`\n**Size**       | `app:chipIconSize`                              | `setChipIconSize`<br/>`setChipIconSizeResource`<br/>`getChipIconSize` | `18dp`\n**Padding**    | `app:iconStartPadding`<br/>`app:iconEndPadding` | `setIcon*Padding`<br/>`setIcon*PaddingResource`<br/>`getIcon*Padding` | `0dp`, `-2dp` (filter end padding)\n\n**Checked icon**\n\nIf visible, the checked icon overlays the chip icon.\n\nElement        | Attribute                | Related method(s)                                                              | Default value\n-------------- | ------------------------ | ------------------------------------------------------------------------------ | -------------\n**Icon**       | `app:checkedIcon`        | `setCheckedIconVisible`<br/>`isCheckedIconVisible`                             | `@drawable/ic_m3_chip_checked_circle`\n**Visibility** | `app:checkedIconVisible` | `setCheckedIcon`<br/>`setCheckedIconResource`<br/>`getCheckedIcon`             | `true` (input, filter)\n**Color**      | `app:checkedIconTint`    | `setCheckedIconTint`<br/>`setCheckedIconTintResource`<br/>`getCheckedIconTint` | `null`\n\n#### Text attributes\n\nElement        | Attribute                                       | Related method(s)                                                           | Default value\n-------------- | ----------------------------------------------- | --------------------------------------------------------------------------- | -------------\n**Text label** | `android:text`                                  | `setChipText`<br/>`setChipTextResource`<br/>`getChipText`                   | `null`\n**Color**      | `android:textColor`                             | `setTextColor`<br/>`getTextColors`                                          | `?attr/colorOnSurfaceVariant`\n**Typography** | `android:textAppearance`                        | `setTextAppearance`<br/>`setTextAppearanceResource`<br/>`getTextAppearance` | `?attr/textAppearanceLabelLarge`\n**Padding**    | `app:textStartPadding`<br/>`app:textEndPadding` | `setText*Padding`<br/>`setText*PaddingResource`<br/>`getText*Padding`       | `8dp` (start)<br/>`6dp` (end)\n\n#### Remove (close) icon attributes\n\nElement                 | Attribute                                                 | Related method(s)                                                                    | Default value\n----------------------- | --------------------------------------------------------- | ------------------------------------------------------------------------------------ | -------------\n**Icon**                | `app:closeIcon`                                           | `setCloseIcon`<br/>`setCloseIconResource`<br/>`getCloseIcon`                         | `@drawable/ic_mtrl_chip_close_circle`\n**Visibility**          | `app:closeIconVisible`                                    | `setCloseIconVisible`<br/>`isCloseIconVisible`                                       | `true` for input\n**Color**               | `app:closeIconTint`                                       | `setCloseIconTint`<br/>`setCloseIconTintResource`<br/>`getCloseIconTint`             | `?attr/colorOnSurfaceVariant`\n**Size**                | `app:closeIconSize`                                       | `setCloseIconSize`<br/>`setCloseIconSizeResource`<br/>`getCloseIconSize`             | `18dp`\n**Padding**             | `app:closeIconStartPadding`<br/>`app:closeIconEndPadding` | `setCloseIcon*Padding`<br/>`setCloseIcon*PaddingResource`<br/>`getCloseIcon*Padding` | `4dp` input end padding\n**Content description** | N/A                                                       | `setCloseIconContentDescription`<br/>`getCloseIconContentDescription`                | `@string/mtrl_chip_close_icon_content_description`\n\n#### `ChipGroup` attributes\n\nElement       | Attribute                                                                   | Related method(s)                                             | Default value\n------------- | --------------------------------------------------------------------------- | ------------------------------------------------------------- | -------------\n**Layout**    | `app:singleLine`                                                            | `setSingleLine`<br/>`isSingleLine`                            | `false`\n**Selection** | `app:singleSelection`<br/>`app:selectionRequired`                           | `setSingleSelection*`<br/>`isSingleSelection*`                | `false`<br/>`false`\n**Spacing**   | `app:chipSpacing`<br/>`app:chipSpacingHorizontal`<br/>`chipSpacingVertical` | `setSpacing*`<br/>`setChipSpacing*Resource`<br/>`getSpacing*` | `8dp`\n\n#### Styles\n\nElement                         | Style\n------------------------------- | ----------------------------------\n**Default style (assist chip)** | `Widget.Material3.Chip.Assist`\n**Input chip**                  | `Widget.Material3.Chip.Input`\n**Suggestion chip**             | `Widget.Material3.Chip.Suggestion`\n**Filter chip**                 | `Widget.Material3.Chip.Filter`\n**`ChipGroup` style**           | `Widget.Material3.ChipGroup`\n\n#### Theme attributes\n\nElement            | Theme attribute             | Default style\n------------------ | --------------------------- | -------------\n**`Chip`**         | `?attr/chipStyle`           | `Widget.Material3.Chip.Assist`\n**`ChipGroup`**    | `?attr/chipGroupStyle`      | `Widget.Material3.ChipGroup`\n**`ChipDrawable`** | `?attr/chipStandaloneStyle` | `Widget.Material3.Chip.Input`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/res/values/styles.xml)\nand\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/res/values/attrs.xml).\n\n## Theming chips\n\nChips support [Material Theming](https://material.io/components/chips/#theming),\nwhich customizes color, typography and shape.\n\n### Chip theming example\n\nAPI and source code:\n\n*   `Chip`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/Chip)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/Chip.java)\n*   `ChipGroup`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipGroup)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipGroup.java)\n*   `ChipDrawable`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/chip/ChipDrawable)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/chip/ChipDrawable.java)\n\nThe following example shows chips with Material Theming.\n\n!["3 chips with brown text and icons, white fill, and pink outlines"](assets/chips/chips_theming.png)\n\n#### Implementing chip theming\n\nUse theme attributes and styles in `res/values/styles.xml`, which applies the\ntheme to all chips and affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorOnSurface">@color/shrine_pink_100</item>\n    <item name="textAppearanceBodyMedium">@style/TextAppearance.App.BodyMedium</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n    <item name="chipStyle">@style/Widget.App.Chip</item>\n</style>\n\n<style name="Widget.App.Chip" parent="Widget.Material3.Chip.Input">\n    <item name="chipIconTint">@color/shrine_pink_900</item>\n    <item name="chipBackgroundColor">@color/white</item>\n    <item name="chipStrokeWidth">2dp</item>\n    <item name="chipStrokeColor">@color/stroke_tint</item>\n    <item name="checkedIconVisible">false</item>\n    <item name="shapeAppearanceOverlay">@null</item>\n</style>\n\n<style name="TextAppearance.App.BodyMedium" parent="TextAppearance.Material3.BodyMedium">\n    <item name="fontFamily">@font/rubik_regular</item>\n    <item name="android:fontFamily">@font/rubik_regular</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.Material3.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nin `color/stroke_tint.xml`:\n\n```xml\n<selector xmlns:android="http://schemas.android.com/apk/res/android">\n  <item android:color="?attr/colorOnSurface" android:state_checked="true"/>\n  <item android:color="@color/shrine_pink_100"/>\n</selector>\n```\n\nUse a default style theme attribute, styles and a theme overlay. This applies\nthe theme to all chips but does not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="chipStyle">@style/Widget.App.Chip</item>\n</style>\n\n<style name="Widget.App.Chip" parent="Widget.Material3.Chip.Input">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Chip</item>\n    <item name="android:textAppearance">@style/TextAppearance.App.BodyMedium</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n    ...\n</style>\n\n<style name="ThemeOverlay.App.Chip" parent="">\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n</style>\n```\n\nUse the style in the layout, which affects only specific chips:\n\n```xml\n<com.google.android.material.chip.Chip\n      ...\n      style="@style/Widget.App.Chip."  />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"chips"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\chips.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\chips.stories.jsx"})},"./stories/dialogs.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Dialogs"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"dialogs"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Dialogs"\nlayout: detail\nsection: components\nexcerpt: "Dialogs are modal windows that require interaction."\niconId: dialog\npath: /catalog/dialogs/\n--\x3e\n\n# Dialogs\n\n[Dialogs](https://material.io/components/dialogs/) inform users about a task and\ncan contain critical information, require decisions, or involve multiple tasks.\n\n!["Dialog to confirm settings centered in a screen"](assets/dialogs/dialogs_hero.png)\n\n**Contents**\n\n*   [Using dialogs](#using-dialogs)\n*   [Basic dialog](#basic-dialog)\n*   [Full-screen dialog](#full-screen-dialog)\n*   [Theming](#theming-dialogs)\n\n## Using dialogs\n\nBefore you can use Material dialogs, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n```kt\nMaterialAlertDialogBuilder(context)\n    // Add customization options here\n    .show()\n```\n\n### Making dialogs accessible\n\nThe contents within a dialog should follow their own accessibility guidelines,\nsuch as an icon on a title having a content description via the\n`android:contentDescription` attribute set in the\n`MaterialAlertDialog.Material3.Title.Icon` style or descendant.\n\n### Types\n\nThere are two types of dialogs: 1. [Basic dialog](#basic-dialog), 2.\n[Full-screen dialog](#full-screen-dialog)\n\n![Examples of the two types of dialogs.](assets/dialogs/dialogs_types.png)\n\n## Dialogs\n\nA dialog is a type of modal window that appears in front of app content to\nprovide critical information or ask for a decision. Dialogs disable all app\nfunctionality when they appear, and remain on screen until confirmed, dismissed,\nor a required action has been taken.\n\nDialogs are purposefully interruptive, so they should be used sparingly.\n\n### Dialog examples\n\nAPI and source code:\n\n*   `MaterialAlertDialogBuilder`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/dialog/MaterialAlertDialogBuilder)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/MaterialAlertDialogBuilder.java)\n\n## Basic dialog\n\nThe following example shows a basic dialog.\n\n!["Dialog with title, and text and purple buttons to cancel, decline or accept"](assets/dialogs/dialogs_basic.png)\n\nIn code:\n\n```kt\nMaterialAlertDialogBuilder(context)\n        .setTitle(resources.getString(R.string.title))\n        .setMessage(resources.getString(R.string.supporting_text))\n        .setNeutralButton(resources.getString(R.string.cancel)) { dialog, which ->\n            // Respond to neutral button press\n        }\n        .setNegativeButton(resources.getString(R.string.decline)) { dialog, which ->\n            // Respond to negative button press\n        }\n        .setPositiveButton(resources.getString(R.string.accept)) { dialog, which ->\n            // Respond to positive button press\n        }\n        .show()\n```\n\n## Full-screen dialog\n\nFull-screen dialogs group a series of tasks, such as creating a calendar entry\nwith the event title, date, location, and time. Because they take up the entire\nscreen, full-screen dialogs are the only dialogs over which other dialogs can\nappear.\n\nThere is no specific Material implementation of a full-screen dialog. You can\nimplement it by using a\n[`DialogFragment`](https://developer.android.com/reference/androidx/fragment/app/DialogFragment)\nas explained in the\n[Android Developer guides](https://developer.android.com/guide/topics/ui/dialogs#FullscreenDialog).\n\n### Anatomy and key properties\n\nA dialog has a container, content (either supporting text or a set of items of a\nparticular type), a background scrim, and, optionally, title and buttons.\n\n![anatomy](assets/dialogs/dialogs_anatomy.png)\n\n1.  Container\n2.  Icon (optional)\n3.  Title (optional)\n4.  Content\n5.  Buttons (optional)\n6.  Scrim\n\n#### Container attributes\n\nElement                             | **Attribute**                                            | **Related methods**                                    | **Default value**\n----------------------------------- | -------------------------------------------------------- | ------------------------------------------------------ | -----------------\n**Color**                           | `app:backgroundTint`                                     | N/A                                                    | `?attr/colorSurface`\n**Shape**                           | `app:shapeAppearance`<br/>`app:shapeAppearanceOverlay`   | N/A                                                    | `?attr/shapeAppearanceMediumComponent` with a corner size of `28dp`\n**Background inset start and end**  | `app:backgroundInsetStart`<br/>`app:backgroundInsetEnd`  | `setBackgroundInsetStart`<br/>`setBackgroundInsetEnd`  | `24dp`\n**Background inset top and bottom** | `app:backgroundInsetTop`<br/>`app:backgroundInsetBottom` | `setBackgroundInsetTop`<br/>`setBackgroundInsetBottom` | `80dp`\n\n#### Title attributes\n\nElement        | **Attribute**            | **Related methods**              | **Default value**\n-------------- | ------------------------ | -------------------------------- | -----------------\n**Text label** | N/A                      | `setTitle`<br/>`setCustomTitle`  | `null`\n**Text color** | `android:textColor`      | N/A                              | `?attr/colorOnSurface`\n**Typography** | `android:textAppearance` | N/A                              | `?attr/textAppearanceHeadlineSmall`\n**Icon**       | N/A                      | `setIcon`<br/>`setIconAttribute` | `null`\n**Icon tint**  | `app:tint`               | N/A                              | `?attr/colorSecondary`\n\n#### Content attributes\n\n**Supporting text**\n\nElement        | **Attribute**            | **Related methods** | **Default value**\n-------------- | ------------------------ | ------------------- | -----------------\n**Text**       | N/A                      | `setMessage`        | `null`\n**Color**      | `android:textColor`      | N/A                 | `?attr/colorOnSurfaceVariant`\n**Typography** | `android:textAppearance` | N/A                 | `?attr/textAppearanceBodyMedium`\n\n**List item**\n\nElement                                 | **Attribute**                  | **Related methods**    | **Default value**\n--------------------------------------- | ------------------------------ | ---------------------- | -----------------\n**List item layout**                    | `app:listItemLayout`           | `setItems`             | [`@layout/mtrl_alert_select_dialog_item`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/layout/mtrl_alert_select_dialog_item.xml)\n**List item layout style**              | N/A                            | N/A                    | `?attr/materialAlertDialogBodyTextStyle`\n**List item text color**                | `android:textColor`            | N/A                    | `?attr/colorOnSurfaceVariant`\n**List item typography**                | `android:textAppearance`       | N/A                    | `?attr/textAppearanceBodyMedium`\n**Multi choice item layout**            | `app:multiChoiceItemLayout`    | `setMultiChoiceItems`  | [`@layout/mtrl_alert_select_dialog_multichoice`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/layout/mtrl_alert_select_dialog_multichoice.xml)\n**Single choice item layout**           | `app:singleChoiceItemLayout`   | `setSingleChoiceItems` | [`@layout/mtrl_alert_select_dialog_singlechoice`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/layout/mtrl_alert_select_dialog_singlechoice.xml)\n**Multi/single choice item style**      | `android:checkedTextViewStyle` | N/A                    | `@style/Widget.Material3.CheckedTextView`\n**Multi/single choice item text color** | `android:textColor`            | N/A                    | `?attr/colorOnSurfaceVariant`\n**Multi/single choice item typography** | `android:textAppearance`       | N/A                    | `?attr/textAppearanceBodyLarge`\n\n**Note:** You can set any custom view to be the content of your dialog via the\n`setView` method.\n\n#### Buttons attributes\n\nElement                                          | **Attribute**                     | **Related methods** | **Default value**\n------------------------------------------------ | --------------------------------- | ------------------- | -----------------\n**Buttons theme attributes (negative/positive)** | `app:buttonBar*ButtonStyle`       | N/A                 | `@style/Widget.Material3.Button.TextButton.Dialog`\n**Buttons theme attributes (neutral)**           | `app:buttonBarNeutralButtonStyle` | N/A                 | `@style/Widget.Material3.Button.TextButton.Dialog.Flush`\n**Buttons (neutral/negative/positive)**          | N/A                               | `set*Button`        | `null`\n**Icons**                                        | N/A                               | `set*ButtonIcon`    | `null`\n\nFor specific button attributes, see the\n[Buttons documentation](https://github.com/material-components/material-components-android/tree/master/docs/components/Button.md).\n\n#### Scrim attributes\n\nElement        | **Attribute**                 | **Related methods** | **Default value**\n-------------- | ----------------------------- | ------------------- | -----------------\n**Dim amount** | `android:backgroundDimAmount` | N/A                 | 32%\n\n#### Theme overlays\n\nElement                    | **Theme overlay**\n-------------------------- | -----------------\n**Default theme overlay**  | `ThemeOverlay.Material3.MaterialAlertDialog`\n**Centered theme overlay** | `ThemeOverlay.Material3.MaterialAlertDialog.Centered`\n\nDefault theme overlay attribute: `?attr/materialAlertDialogTheme`\n\n#### Theme attributes\n\nElement                   | **Theme attribute**                       | **Default value**\n------------------------- | ----------------------------------------- | -----------------\n**Default style**         | `?attr/alertDialogStyle`                  | `@style/MaterialAlertDialog.Material3`\n**Title text style**      | `?attr/materialAlertDialogTitleTextStyle` | `@style/MaterialAlertDialog.Material3.Title.Text`\n**Supporting text style** | `?attr/materialAlertDialogBodyTextStyle`  | `@style/MaterialAlertDialog.Material3.Body.Text`\n\nSee full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/values/styles.xml),\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/values/attrs.xml),\nand\n[theme overlays](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/res/values/themes.xml).\n\n## Theming dialogs\n\nA dialog supports\n[Material Theming](https://material.io/components/dialogs/#theming) which can\ncustomize color, typography and shape.\n\n### Dialog theming example\n\nAPI and source code:\n\n*   `MaterialAlertDialogBuilder`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/dialog/MaterialAlertDialogBuilder)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/dialog/MaterialAlertDialogBuilder.java)\n\nThe following example shows a dialog with Material Theming.\n\n![Dialog with title and text buttons in brown and selected radio button in pink](assets/dialogs/dialogs_theming.png)\n\n#### Implementing dialog theming\n\nSetting the theme attribute `materialAlertDialogTheme` to your custom\n`ThemeOverlay` will affect all dialogs.\n\nIn `res/values/themes.xml`:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n  ...\n  <item name="materialAlertDialogTheme">@style/ThemeOverlay.App.MaterialAlertDialog</item>\n</style>\n\n<style name="ThemeOverlay.App.MaterialAlertDialog" parent="ThemeOverlay.Material3.MaterialAlertDialog">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorSecondary">@color/shrine_pink_100</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="alertDialogStyle">@style/MaterialAlertDialog.App</item>\n    <item name="materialAlertDialogTitleTextStyle">@style/MaterialAlertDialog.App.Title.Text</item>\n    <item name="buttonBarPositiveButtonStyle">@style/Widget.App.Button</item>\n    <item name="buttonBarNegativeButtonStyle">@style/Widget.App.Button</item>\n</style>\n```\n\nIn `res/values/styles.xml`:\n\n```xml\n<style name="MaterialAlertDialog.App" parent="MaterialAlertDialog.Material3">\n    <item name="shapeAppearance">@style/ShapeAppearance.App.MediumComponent</item>\n    <item name="shapeAppearanceOverlay">@null</item>\n</style>\n\n<style name="MaterialAlertDialog.App.Title.Text" parent="MaterialAlertDialog.Material3.Title.Text">\n     <item name="android:textColor">@color/shrine_pink_900</item>\n</style>\n\n  <style name="Widget.App.Button" parent="Widget.Material3.Button.TextButton.Dialog">\n    <item name="android:textColor">@color/shrine_pink_900</item>\n  </style>\n\n<style name="ShapeAppearance.App.MediumComponent" parent="ShapeAppearance.Material3.MediumComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">8dp</item>\n</style>\n```\n\nOr if you want to change only one specific dialog, pass the `themeResId` to the\nconstructor:\n\n```kt\nMaterialAlertDialogBuilder(context,  R.style.ThemeOverlay_App_MaterialAlertDialog)\n        ...\n        .show()\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"dialogs"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\dialogs.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\dialogs.stories.jsx"})},"./stories/floatingButton.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"FloatingButton"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"floatingButton"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Floating action buttons"\nlayout: detail\nsection: components\nexcerpt:  "A floating action button (FAB) represents the primary action of a screen."\niconId: button\npath: /catalog/floating-action-button/\n--\x3e\n\n# Floating action buttons\n\nA\n[floating action button (FAB)](https://material.io/components/buttons-floating-action-button)\nrepresents the primary action of a screen.\n\n!["A FAB on a screen"](assets/fabs/fab_hero.png)\n\n**Contents**\n\n*   [Using FABs](#using-fabs)\n*   [FABs](#fabs)\n*   [Small FABs](#small-fabs)\n*   [Large FABs](#large-fabs)\n*   [Extended FABs](#extended-fabs)\n*   [Theming FABs](#theming-fabs)\n\n## Using FABs\n\nA FAB performs the primary, or most common, action on a screen. It appears in\nfront of all screen content, typically as a boxy shape with an icon in its\ncenter.\n\nBefore you can use Material FABs, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n**Note:** If the `FloatingActionButton` is a child of a `CoordinatorLayout`, you get\ncertain behaviors for free. It will automatically shift so that any displayed\n`Snackbar`s do not cover it, and will automatically hide when covered by an\n`AppBarLayout` or `BottomSheetBehavior`.\n\n### Making FABs accessible\n\nYou should set a content description on a FAB via the\n`android:contentDescription` attribute or `setContentDescription` method so that\nscreen readers like TalkBack are able to announce their purpose or action. Text\nrendered in Extended FABs is automatically provided to accessibility services,\nso additional content labels are usually unnecessary.\n\n### Visibility\n\nUse the `show` and `hide` methods to animate the visibility of a\n`FloatingActionButton` or an `ExtendedFloatingActionButton`. The show animation\ngrows the widget and fades it in, while the hide animation shrinks the widget\nand fades it out.\n\n```kt\n// To show:\nfab.show()\n// To hide:\nfab.hide()\n```\n\n### Extending and Shrinking\n\nUse the `extend` and `shrink` methods to animate showing and hiding the text of\nan `ExtendedFloatingActionButton`. The extend animation extends the FAB to show\nthe text and the icon. The shrink animation shrinks the FAB to show just the\nicon.\n\n```kt\n// To extend:\nextendedFab.extend()\n// To shrink:\nextendedFab.shrink()\n```\n\n### Sizing FABs\n\nThe `FloatingActionButton` can be sized either by using `app:fabCustomSize` or\nfor the large/small FAB (M3 only) by applying the desired style. The\n`app:fabSize` discrete size mode is deprecated in Material3 style. If the\n`app:fabSize` is overridden in your FAB style, which inherits from one of these\nstyles:\n\n*   `Widget.Material3.FloatingActionButton(.Large).Primary`\n*   `Widget.Material3.FloatingActionButton(.Large).Secondary`\n*   `Widget.Material3.FloatingActionButton(.Large).Tertiary`\n*   `Widget.Material3.FloatingActionButton(.Large).Surface`\n\nPlease consider one of the following migration options:\n\n*   If `normal` size is used, set the parent style to\n    `Widget.Material3.FloatingActionButton.{Color}` and remove `app:fabSize`.\n*   If `mini` size is used, set the parent style to\n    `Widget.Material3.FloatingActionButton.Small.{Color}` and remove\n    `app:fabSize`.\n*   If FAB size changes in runtime by either setting `fabSize` or\n    `fabCustomSize`, and relative sized corners are desired, set\n    `shapeAppearanceOverlay` as\n    `@style/ShapeAppearanceOverlay.Material3.FloatingActionButton` in the style.\n\nIf you\'d like to use the small FAB, apply one of these style attributes:\n\n*   `?attr/floatingActionButtonSmallStyle`\n*   `?attr/floatingActionButtonSmallPrimaryStyle`\n*   `?attr/floatingActionButtonSmallSecondaryStyle`\n*   `?attr/floatingActionButtonSmallTertiaryStyle`\n*   `?attr/floatingActionButtonSmallSurfaceStyle`\n\nIf you\'d like to use the large FAB, apply one of these style attributes:\n\n*   `?attr/floatingActionButtonLargeStyle`\n*   `?attr/floatingActionButtonLargePrimaryStyle`\n*   `?attr/floatingActionButtonLargeSecondaryStyle`\n*   `?attr/floatingActionButtonLargeTertiaryStyle`\n*   `?attr/floatingActionButtonLargeSurfaceStyle`\n\n### Types\n\nThere are four types of FABS: 1. [FABs](#fabs), 2. [Small FABs](#small-fabs),\n3. [Large FABs](#large-fabs)\n\n![FAB types](assets/fabs/FAB_types.png)\n\nAnd 4. [Extended FABs](#extended-fabs)\n\n![Extended FAB type](assets/fabs/extendedFAB_types.png)\n\n## FABs\n\nFABs are the default size and style for a primary action button.\n\nAPI and source code:\n\n*   `FloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/FloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java)\n\n### FAB example\n\nThe following example shows a regular FAB with a plus icon.\n\n![56dp boxy purple FAB with dark plus icon](assets/fabs/fab_regular.png)\n\nIn the layout:\n\n```xml\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    ...\n    android:layout_width="match_parent"\n    android:layout_height="match_parent">\n\n  \x3c!-- Main content --\x3e\n\n  <com.google.android.material.floatingactionbutton.FloatingActionButton\n      android:id="@+id/floating_action_button"\n      android:layout_width="wrap_content"\n      android:layout_height="wrap_content"\n      android:layout_gravity="bottom|end"\n      android:layout_margin="16dp"\n      android:contentDescription="@string/fab_content_desc"\n      app:srcCompat="@drawable/ic_plus_24"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\nIn code:\n\n```kt\nfab.setOnClickListener {\n    // Respond to FAB click\n}\n```\n\n#### Anatomy\n\n![Regular FAB anatomy diagram](assets/fabs/FAB_anatomy-long.png)\n\nA regular FAB has a container and an icon.\n\n1.  Container\n1.  Icon\n\n## Small FABs\n\nA small FAB should be used on smaller screens.\n\nSmall FABs can also be used to create visual continuity with other screen\nelements.\n\nAPI and source code:\n\n*   `FloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/FloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java)\n\n### Small FAB example\n\nThe following example shows a small FAB with a plus icon.\n\n![40dp boxy purple FAB with dark plus icon](assets/fabs/fab_mini.png)\n\nIn the layout:\n\n```xml\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    ...\n    >\n\n  \x3c!-- Main content --\x3e\n\n  <com.google.android.material.floatingactionbutton.FloatingActionButton\n      ...\n      style="?attr/floatingActionButtonSmallStyle"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\nIn code:\n\n```kt\nfab.setOnClickListener {\n    // Respond to FAB click\n}\n```\n\n#### Anatomy\n\n![Small FAB anatomy diagram](assets/fabs/miniFAB_anatomy-long.png)\n\nA small FAB has a container and an icon.\n\n1.  Container\n1.  Icon\n\n## Large FABs\n\nA large FAB is useful when the layout calls for a clear and primary action that\nthe user is most likely to take, and where a larger footprint would help them to\nengage. For example, when appearing on taller and larger device screens.\n\nAPI and source code:\n\n*   `FloatingActionButton`\n  *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/FloatingActionButton)\n  *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java)\n\n### Large FAB example\n\nThe following example shows a large FAB with a plus icon.\n\n![96dp boxy purple FAB with dark plus icon](assets/fabs/fab_large.png)\n\nIn the layout:\n\n```xml\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    ...\n    >\n\n  \x3c!-- Main content --\x3e\n\n  <com.google.android.material.floatingactionbutton.FloatingActionButton\n      ...\n      style="?attr/floatingActionButtonLargeStyle"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\nIn code:\n\n```kt\nfab.setOnClickListener {\n    // Respond to FAB click\n}\n```\n\n#### Anatomy\n\n![Large FAB anatomy diagram](assets/fabs/largeFAB_anatomy-long.png)\n\nA large FAB has a container and an icon.\n\n1.  Container\n1.  Icon\n\n### Regular, small, and large FAB key properties\n\n#### Container attributes\n\nElement                       | Attribute                                      | Related method(s)                                                                     | Default value\n----------------------------- | ---------------------------------------------- | ------------------------------------------------------------------------------------- | -------------\n**Color**                     | `app:backgroundTint`                           | `setBackgroundTintList`<br/>`getBackgroundTintList`                                   | `?attr/colorPrimaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_background_color_selector.xml))\n**Stroke**                    | `app:borderWidth`                              | N/A                                                                                   | `0dp`\n**Size**                      | `app:fabSize`<br>`app:fabCustomSize`           | `setSize`<br/>`setCustomSize`<br/>`clearCustomSize`<br/>`getSize`<br/>`getCustomSize` | `auto`\n**Shape**                     | `shapeAppearance`<br/>`shapeAppearanceOverlay` | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`                               | `ShapeAppearanceOverlay.Material3.FloatingActionButton`<br/>\n**Elevation**                 | `app:elevation`                                | `setElevation`<br/>`getCompatElevation`                                               | `6dp`\n**Hovered/Focused elevation** | `app:hoveredFocusedTranslationZ`               | `setCompatHoveredFocusedTranslationZ`<br/>`getCompatHoveredFocusedTranslationZ`       | `2dp`\n**Pressed elevation**         | `app:pressedTranslationZ`                      | `setCompatPressedTranslationZ`<br/>`getCompatPressedTranslationZ`                     | `6dp`\n**Ripple**                    | `app:rippleColor`                              | `setRippleColor`<br/>`getRippleColor`<br/>`getRippleColorStateList`                   | variations of `?attr/colorOnPrimaryContainer`, see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_ripple_color_selector.xml)\n**Motion**                    | `app:showMotionSpec`<br>`app:hideMotionSpec`   | `set*MotionSpec`<br/>`set*MotionSpecResource`<br/>`get*MotionSpec`                    | `@null`\n\n#### Icon attributes\n\nElement   | Attribute       | Related method(s)                                           | Default value\n--------- | --------------- | ----------------------------------------------------------- | -------------\n**Icon**  | `app:srcCompat` | `setImageDrawable`<br/>`setImageResource`<br/>`getDrawable` | `null`\n**Color** | `app:tint`      | `setImageTintList`<br/>`getImageTintList`                   | `?attr/colorOnPrimaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n\n#### Styles\n\nElement           | Style\n----------------- | ------------------------------------------------\n**Default style** | `Widget.Material3.FloatingActionButton.Primary`\n\nDefault style theme attribute: `?attr/floatingActionButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/attrs.xml).\n\n## Extended FABs\n\nThe extended FAB is wider, and it includes a text label.\n\n**Note:** `ExtendedFloatingActionButton` is a child class of\n[`MaterialButton`](Button.md), rather than `FloatingActionButton`. This means\nthat several attributes which are applicable to `FloatingActionButton` have\ndifferent naming in `ExtendedFloatingActionButton`. For example,\n`FloatingActionButton` uses `app:srcCompat` to set the icon drawable, whereas\n`ExtendedFloatingActionButton` uses `app:icon`. See the\n[attributes tables](#anatomy-and-key-properties) below for more details.\n\nAPI and source code:\n\n*   `ExtendedFloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton.java)\n\n### Extended FAB example\n\nThe following example shows an extended FAB with a plus icon.\n\n![Purple FAB with plus icon and "Extended" label](assets/fabs/fab_extended.png)\n\nIn the layout:\n\n```xml\n<androidx.coordinatorlayout.widget.CoordinatorLayout\n    ...\n    >\n\n  \x3c!-- Main content --\x3e\n\n  <com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton\n    android:id="@+id/extended_fab"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:layout_margin="16dp"\n    android:layout_gravity="bottom|end"\n    android:contentDescription="@string/extended_fab_content_desc"\n    android:text="@string/extended_fab_label"\n    app:icon="@drawable/ic_plus_24px"/>\n\n</androidx.coordinatorlayout.widget.CoordinatorLayout>\n```\n\nIn code:\n\n```kt\nextendedFab.setOnClickListener {\n    // Respond to Extended FAB click\n}\n```\n\n### Anatomy and key properties\n\n![Extended FAB anatomy diagram](assets/fabs/extended-FAB_anatomy-long.png)\n\nAn extended FAB has a text label, a transparent container and an optional icon.\n\n1.  Container\n2.  Text label\n3.  Icon (Optional)\n\n#### Container attributes\n\nElement                       | Attribute                                                                                  | Related method(s)                                                  | Default value\n----------------------------- | ------------------------------------------------------------------------------------------ | ------------------------------------------------------------------ | -------------\n**Color**                     | `app:backgroundTint`                                                                       | `setBackgroundTintList`<br/>`getBackgroundTintList`                | `?attr/colorPrimaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_background_color_selector.xml))\n**Stroke color**              | `app:strokeColor`                                                                          | `setStrokeColor`<br/>`getStrokeColor`                              | `null`\n**Stroke width**              | `app:strokeWidth`                                                                          | `setStrokeWidth`<br/>`getStrokeWidth`                              | `0dp`\n**Size**                      | `app:collapsedSize`                                                                        | N/A                                                                |\n**Extend Strategy**           | `app:extendStrategy`                                                                       | N/A                                                                | `wrap_content`\n**Shape**                     | `app:shapeAppearance`<br/>`app:shapeAppearanceOverlay`                                     | `setShapeAppearanceModel`<br/>`getShapeAppearanceModel`            | `ShapeAppearanceOverlay.Material3.FloatingActionButton`<br/>\n**Elevation**                 | `app:elevation`                                                                            | `setElevation`<br/>`getElevation`                                  | `6dp`\n**Hovered/Focused elevation** | `app:hoveredFocusedTranslationZ`                                                           | N/A                                                                | `2dp`\n**Pressed elevation**         | `app:pressedTranslationZ`                                                                  | N/A                                                                | `6dp`\n**Ripple**                    | `app:rippleColor`                                                                          |                                                                    | variations of `?attr/colorOnPrimaryContainer`, see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_ripple_color_selector.xml)\n**Motion**                    | `app:showMotionSpec`<br>`app:hideMotionSpec`<br/>`extendMotionSpec`<br/>`shrinkMotionSpec` | `set*MotionSpec`<br/>`set*MotionSpecResource`<br/>`get*MotionSpec` | see [animators](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/animator)\n\n#### Icon attributes\n\nElement                           | Attribute         | Related method(s)                                         | Default value\n--------------------------------- | ----------------- | --------------------------------------------------------- | -------------\n**Icon**                          | `app:icon`        | `setIcon`<br/>`setIconResource`<br/>`getIcon`             | `null`\n**Color**                         | `app:iconTint`    | `setIconTint`<br/>`setIconTintResource`<br/>`getIconTint` | `?attr/colorOnPrimaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Size**                          | `app:iconSize`    | `setIconSize`<br/>`getIconSize`                           | `24dp`\n**Padding between icon and text** | `app:iconPadding` | `setIconPadding`<br/>`getIconPadding`                     | `12dp`\n\n#### Text label\n\nElement        | Attribute                | Related method(s)                 | Default value\n-------------- | ------------------------ | --------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`           | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColor` | `?attr/colorPrimaryContainer` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_button_foreground_color_selector.xml))\n**Typography** | `android:textAppearance` | `setTextAppearance`               | `?attr/textAppearanceLabelLarge`\n\n#### Styles\n\nElement                                   | Style\n----------------------------------------- | -----\n**Default style**                         | `Widget.Material3.ExtendedFloatingActionButton.Icon.Primary`\n**Text-only when**<br/>**extended style** | `Widget.Material3.ExtendedFloatingActionButton.Primary`\n\nDefault style theme attribute: `?attr/extendedFloatingActionButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/res/values/attrs.xml).\n\n## Theming FABs\n\n### FAB theming example\n\nAPI and source code:\n\n*   `FloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/FloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/FloatingActionButton.java)\n*   `ExtendedFloatingActionButton`\n    *   [Class description](https://developer.android.com/reference/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/floatingactionbutton/ExtendedFloatingActionButton.java)\n\nThe following example shows a regular, small, and extended FAB with Material\nTheming.\n\n!["3 square pink FABs with cut corners with brown plus icons: 56dp, 40dp, 56dp\nwith "Extended" label"](assets/fabs/fab_theming.png)\n\n#### Implementing FAB theming\n\nUse theme attributes and styles in `res/values/styles.xml` to add themes to all\nFABs. This affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimaryContainer">@color/purple_500</item>\n    <item name="colorOnPrimaryContainer">@color/purple_700</item>\n</style>\n```\n\nUse a default style theme attribute, styles and a theme overlay. This themes all\nFABs in your app but does not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="extendedFloatingActionButtonStyle">@style/Widget.App.ExtendedFloatingActionButton</item>\n    <item name="floatingActionButtonStyle">@style/Widget.App.FloatingActionButton</item>\n</style>\n\n<style name="Widget.App.ExtendedFloatingActionButton" parent="Widget.Material3.ExtendedFloatingActionButton.Icon.Primary">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.FloatingActionButton</item>\n</style>\n\n<style name="Widget.App.FloatingActionButton" parent="Widget.Material3.FloatingActionButton.Primary">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.FloatingActionButton</item>\n</style>\n\n<style name="ThemeOverlay.App.FloatingActionButton" parent="">\n    <item name="colorContainer">@color/purple_500</item>\n    <item name="colorOnContainer">@color/purple_700</item>\n</style>\n```\n\nUse one of the styles in the layout. That affects only this FAB:\n\n```xml\n<com.google.android.material.floatingactionbutton.FloatingActionButton\n    ...\n    style="@style/Widget.App.FloatingActionButton"\n/>\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"floatingButton"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\floatingButton.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\floatingButton.stories.jsx"})},"./stories/radio.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Radio"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"radio"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Material selection controls: Radio buttons"\nlayout: detail\nsection: components\nexcerpt: "Selection controls allow the user to select options."\niconId: radiobutton\npath: /catalog/radiobuttons/\n--\x3e\n\n# Selection controls: radio buttons\n\n[Selection controls](https://material.io/components/selection-controls#usage)\nallow the user to select options.\n\nUse radio buttons to:\n\n*   Select a single option from a list\n*   Expose all available options\n*   If available options can be collapsed, consider using a dropdown menu\n    instead, as it uses less space.\n\n![Settings menu with radio buttons for ringtones](assets/radiobutton/radiobutton_hero.png)\n\n**Contents**\n\n*   [Using radio buttons](#using-radio-buttons)\n*   [Radio button](#radio-button)\n*   [Theming radio buttons](#theming-radio-buttons)\n\n## Using radio buttons\n\nBefore you can use Material radio buttons, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n**Note:** `<RadioButton>` is auto-inflated as\n`<com.google.android.material.button.MaterialRadioButton>` via\n`MaterialComponentsViewInflater` when using a `Theme.Material3.*` theme.\n\n### Making radio buttons accessible\n\nRadio buttons support content labeling for accessibility and are readable by\nmost screen readers, such as TalkBack. Text rendered in radio buttons is\nautomatically provided to accessibility services. Additional content labels are\nusually unnecessary.\n\n### Grouping radio buttons\n\nChanges in the states of one radio button can affect other buttons in the group.\nSpecifically, selecting a `RadioButton` in a `RadioGroup` will de-select all\nother buttons in that group. See the\n[example section below](#radio-buttons-example) for implementation details.\n\n## Radio button\n\nA radio button is a circle that is filled in with an inset when selected. Radio\nbuttons allow the user to select one option from a set. Use radio buttons when\nthe user needs to see all available options. If available options can be\ncollapsed, consider using a dropdown menu because it uses less space.\n\n### Radio buttons example\n\nAPI and source code:\n\n*   `MaterialRadioButton`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/radiobutton/MaterialRadioButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/MaterialRadioButton.java)\n*   `RadioGroup`\n    *   [Class definition](https://developer.android.com/reference/android/widget/RadioGroup)\n\nThe following example shows a radio button group with five radio buttons.\n\n![Example radio button group with 5 radio buttons, the first one is selected and\nthe last one is disabled.](assets/radiobutton/radiobutton_example.png)\n\nIn the layout:\n\n```xml\n<RadioGroup\n    android:id="@+id/radioGroup"\n    android:checkedButton="@+id/radio_button_1"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content">\n    <RadioButton\n        android:id="@+id/radio_button_1"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_1"/>\n    <RadioButton\n        android:id="@+id/radio_button_2"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_2"/>\n    <RadioButton\n        android:id="@+id/radio_button_3"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_3"/>\n    <RadioButton\n        android:id="@+id/radio_button_4"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:text="@string/label_4"/>\n    <RadioButton\n        android:id="@+id/radio_button_5"\n        android:layout_width="match_parent"\n        android:layout_height="match_parent"\n        android:enabled="false"\n        android:text="@string/label_5"/>\n</RadioGroup>\n```\n\nIn code:\n\n```kt\nval checkedRadioButtonId = radioGroup.checkedRadioButtonId // Returns View.NO_ID if nothing is checked.\nradioGroup.setOnCheckedChangeListener { group, checkedId ->\n    // Responds to child RadioButton checked/unchecked\n}\n\n// To check a radio button\nradioButton.isChecked = true\n\n// To listen for a radio button\'s checked/unchecked state changes\nradioButton.setOnCheckedChangeListener { buttonView, isChecked\n    // Responds to radio button being checked/unchecked\n}\n```\n\n## Key properties\n\n### Radio button attributes\n\nElement                    | Attribute                                  | Related method(s)                                          | Default value\n-------------------------- | ------------------------------------------ | ---------------------------------------------------------- | -------------\n**To use material colors** | `app:useMaterialThemeColors`               | `setUseMaterialThemeColors`<br/>`isUseMaterialThemeColors` | `true` (ignored if `app:buttonTint` is set)\n**Color**                  | `app:buttonTint`                           | `setButtonTintList`<br/>`getButtonTintList`                | `?attr/colorOnSurface` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/res/color/m3_radiobutton_button_tint.xml))\n**Min size**               | `android:minWidth`<br/>`android:minHeight` | `(set/get)MinWidth`<br/>`(set/get)MinHeight`               | `?attr/minTouchTargetSize`\n\nThe color of the radio button defaults to `?attr/colorOnSurface` (unchecked) and\n`?attr/colorPrimary` (checked) defined in your app theme. If you want to\noverride this behavior, you could use a custom drawable that should not be\ntinted, set `app:useMaterialThemeColors` to `false`:\n\n```xml\n<RadioButton\n    ...\n    app:useMaterialThemeColors="false"\n/>\n```\n\n### Text label attributes\n\nElement        | Attribute                | Related method(s)                  | Default value\n-------------- | ------------------------ | ---------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`            | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColors` | inherits from `AppCompatRadioButton`\n**Typography** | `android:textAppearance` | `setTextAppearance`                | `?attr/textAppearanceBodyMedium`\n\n### Radio button states\n\nRadio buttons can be selected or unselected. Radio buttons have enabled,\ndisabled, hover, focused, and pressed states.\n\n![Radio button states in an array. Columns are enabled, disabled, hover,\nfocused, pressed. Rows are selected or\nunselected](assets/radiobutton/radiobutton_states.png)\n\n### Styles\n\nElement           | Style\n----------------- | ------------------------------------------------------\n**Default style** | `Widget.Material3.CompoundButton.RadioButton`\n\nDefault style theme attribute: `?attr/radioButtonStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/res/values/attrs.xml).\n\n## Theming radio buttons\n\nRadio buttons support\n[Material Theming](https://material.io/components/selection-controls#theming)\nwhich can customize color and typography.\n\n### Radio button theming example\n\nAPI and source code:\n\n*   `MaterialRadioButton`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/radiobutton/MaterialRadioButton)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/radiobutton/MaterialRadioButton.java)\n*   `RadioGroup`\n    *   [Class definition](https://developer.android.com/reference/android/widget/RadioGroup)\n\nThe following example shows a radio button with Material Theming.\n\n!["5 radio buttons with brown text; first selected with pink outline and fill,\nlast disabled with light brown text and\nbutton"](assets/radiobutton/radiobutton_theming.png)\n\n#### Implementing radio button theming\n\nUse theme attributes in `res/values/styles.xml` which applies to all radio\nbuttons and affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n</style>\n\n```\n\nUse default style theme attributes, styles and theme overlays which apply to all\nradio buttons but do not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="radioButtonStyle">@style/Widget.App.RadioButton</item>\n</style>\n\n<style name="Widget.App.RadioButton" parent="Widget.Material3.CompoundButton.RadioButton">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.RadioButton</item>\n</style>\n\n<style name="ThemeOverlay.App.RadioButton" parent="">\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n</style>\n```\n\nYou can also change the radio button colors via the `?attr/buttonTint`\nattribute:\n\n```xml\n<style name="Widget.App.RadioButton" parent="Widget.Material3.CompoundButton.RadioButton">\n    <item name="buttonTint">@color/button_tint</item>\n</style>\n```\n\nand in `color/button_tint.xml`:\n\n```xml\n<selector xmlns:android="http://schemas.android.com/apk/res/android">\n    <item android:color="@color/shrine_pink_900" android:state_checked="true"/>\n    <item android:alpha="0.38" android:color="@color/shrine_pink_100" android:state_enabled="false"/>\n    <item android:color="@color/shrine_pink_100"/>\n</selector>\n```\n\nYou can use the styles in the layout, which affects only this radio button:\n\n```xml\n<RadioButton\n    ...\n    style="@style/Widget.App.RadioButton"\n/>\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"radio"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\radio.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\radio.stories.jsx"})},"./stories/slider.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Slider"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"slider"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Sliders"\nlayout: detail\nsection: components\nexcerpt: "Sliders allow users to make selections from a range of values."\niconId: slider\npath: /catalog/sliders/\n--\x3e\n\n# Slider\n\n[Sliders](https://m3.material.io/components/sliders/) allow users to make\nselections from a range of values.\n\n!["Slider with sound icon buttons on each end."](assets/slider/slider_hero.png)\n\n**Contents**\n\n*   [Using sliders](#using-sliders)\n*   [Continuous slider](#continuous-slider)\n*   [Discrete slider](#discrete-slider)\n*   [Theming sliders](#theming-sliders)\n\n## Using sliders\n\nBefore you can use Material sliders, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n### Usage\n\n![2 single point sliders](assets/slider/slider_basic.png)\n\nAdd a `Slider` to a layout:\n\n```xml\n\x3c!-- Continuous slider --\x3e\n<com.google.android.material.slider.Slider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"  />\n\n\x3c!-- Discrete slider --\x3e\n<com.google.android.material.slider.Slider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"\n    android:stepSize="10.0"  />\n```\n\nObserve changes to a slider:\n\n```kt\nslider.addOnSliderTouchListener(object : Slider.OnSliderTouchListener {\n    override fun onStartTrackingTouch(slider: Slider) {\n        // Responds to when slider\'s touch event is being started\n    }\n\n    override fun onStopTrackingTouch(slider: Slider) {\n        // Responds to when slider\'s touch event is being stopped\n    }\n})\n\nslider.addOnChangeListener { slider, value, fromUser ->\n    // Responds to when slider\'s value is changed\n}\n```\n\n![2 range sliders](assets/slider/slider_basic_range.png)\n\nAdd a `RangeSlider` to a layout:\n\n```xml\n\x3c!-- Continuous slider --\x3e\n<com.google.android.material.slider.RangeSlider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"\n    app:values="@array/initial_slider_values"  />\n\n\x3c!-- Discrete slider --\x3e\n<com.google.android.material.slider.RangeSlider\n    ...\n    android:valueFrom="0.0"\n    android:valueTo="100.0"\n    app:values="@array/initial_slider_values"\n    android:stepSize="10.0"  />\n```\n\nAnd in `values/arrays.xml`:\n\n```xml\n<resources>\n  <array name="initial_slider_values">\n    <item>20.0</item>\n    <item>70.0</item>\n  </array>\n</resources>\n```\n\nObserve changes to a range slider:\n\n```kt\nrangeSlider.addOnSliderTouchListener(object : RangeSlider.OnSliderTouchListener {\n    override fun onStartTrackingTouch(slider: RangeSlider) {\n        // Responds to when slider\'s touch event is being started\n    }\n\n    override fun onStopTrackingTouch(slider: RangeSlider) {\n        // Responds to when slider\'s touch event is being stopped\n    }\n})\n\nrangeSlider.addOnChangeListener { rangeSlider, value, fromUser ->\n    // Responds to when slider\'s value is changed\n}\n```\n\n### Making sliders accessible\n\nSliders support setting content descriptors for use with screen readers. While\noptional, we strongly encourage their use.\n\nThat can be done in XML via the `android:contentDescription` attribute or\nprogrammatically:\n\n```kt\nslider.contentDescription = contentDescription\n```\n\nIf using a `TextView` to display the value of the slider, you should set\n`android:labelFor` so that screen readers announce that `TextView` refers to the\nslider.\n\nThe minimum touch target size of the thumb is 48dp by default. If a different\nsize is needed, please set `minTouchTargetSize` in the style or the layout.\n\n### Adding/removing the value label\n\nBy default, the slider will show a value label above the thumb when it\'s\nselected. You can change how it\'s drawn via the `app:labelBehavior` attribute or\n`setLabelBehavior` method.\n\nThe modes of `app:labelBehavior` are:\n\n*   `floating` (default) - draws the label floating above the bounds of this\n    view\n*   `withinBounds` - draws the label floating within the bounds of this view\n*   `gone` - prevents the label from being drawn\n*   `visible` - always draws the label\n\nNote: there\'s a known issue where the label doesn\'t scroll along with the screen\nwhen the slider is in a scrollable container and `app:labelBehavior=visible`. To\nwork around that you should either use a different mode or hide the label on\nscroll.\n\n### Setting a `LabelFormatter`\n\nBy using a `LabelFormatter` you can display the selected value using letters to\nindicate magnitude (e.g.: 1.5K, 3M, 12B). That can be achieved through the\n`setLabelFormatter` method.\n\nThe following example shows a slider for a price range in USD currency.\n\n!["Range slider with range of $0 to $100. Left thumb is set at $20, right thumb\nat $70."](assets/slider/slider_price.png)\n\nIn code:\n\n```kt\nrangeSlider.setLabelFormatter { value: Float ->\n    val format = NumberFormat.getCurrencyInstance()\n    format.maximumFractionDigits = 0\n    format.currency = Currency.getInstance("USD")\n    format.format(value.toDouble())\n}\n```\n\n### Types\n\nThere are two types of sliders: 1. [Continuous slider](#continuous-slider), 2.\n[Discrete slider](#discrete-slider)\n\n!["Slider examples of both continuous and discrete sliders."](assets/slider/slider_types.png)\n\nA slider with two thumbs is called a range slider.\n\n## Continuous slider\n\nContinuous sliders allow users to make meaningful selections that don’t require\na specific value.\n\nAPI and source code:\n\n*   `Slider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/Slider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/Slider.java)\n\nThe following example shows a continuous slider.\n\n!["Continuous sliders with pressed thumb valued at 20."](assets/slider/slider_cont.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.Slider\n    android:id="@+id/slider"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:contentDescription="@string/slider_desc"\n    android:value="20.0"\n    android:valueFrom="0.0"\n    android:valueTo="100.0" />\n```\n\n### Continuous range slider\n\nAPI and source code:\n\n*   `RangeSlider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/RangeSlider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/RangeSlider.java)\n\nThe following example shows a continuous range slider.\n\n!["Continuous range slider with left thumb at 20 and right thumb at 70."](assets/slider/slider_cont_range.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.RangeSlider\n  android:id="@+id/range_slider"\n  android:layout_width="match_parent"\n  android:layout_height="wrap_content"\n  android:contentDescription="@string/slider_desc"\n  app:values="@array/initial_slider_values"\n  android:valueFrom="0.0"\n  android:valueTo="100.0" />\n```\n\n## Discrete slider\n\nDiscrete sliders display a numeric value label upon pressing the thumb, which\nallows a user to input an exact value.\n\nAPI and source code:\n\n*   `Slider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/Slider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/Slider.java)\n\nThe following example shows a discrete slider.\n\n!["Discrete single point slider with pressed thumb at a value of 20."](assets/slider/slider_disc.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.Slider\n    ...\n    android:stepSize="10.0" />\n```\n\n### Discrete range slider\n\nAPI and source code:\n\n*   `RangeSlider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/RangeSlider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/RangeSlider.java)\n\nThe following example shows a discrete range slider.\n\n!["Discrete range slider with left thumb at 20 and right thumb at 70."](assets/slider/slider_disc_range.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.slider.RangeSlider\n    ...\n    android:stepSize="10.0"  />\n```\n\n### Anatomy and key properties\n\nA slider has a track, one or two thumbs, and an optional value label. A discrete\nslider also has tick marks.\n\n![Slider anatomy diagram](assets/slider/slider_anatomy.png)\n\n1.  Track\n2.  Thumb\n3.  Value label (optional)\n4.  Tick mark (discrete sliders)\n\n#### Track attributes\n\nElement                                    | Attribute                | Related method(s)                                         | Default value\n------------------------------------------ | ------------------------ | --------------------------------------------------------- | -------------\n**Min value**                              | `android:valueFrom`      | `setValueFrom`<br/>`getValueFrom`                         | N/A\n**Max value**                              | `android:valueTo`        | `setValueTo`<br/>`getValueTo`                             | N/A\n**Step size (discrete)**                   | `android:stepSize`       | `setStepSize`<br/>`getStepSize`                           | N/A\n**Initial selected value (Slider)**        | `android:value`          | `setValue`<br/>`getValue`                                 | N/A\n**Initial selected values (RangeSlider)**  | `app:values`             | `setValues`<br/>`getValues`                               | N/A\n**Height**                                 | `app:trackHeight`        | `setTrackHeight`<br/>`getTrackHeight`                     | `4dp`\n**Color**                                  | `app:trackColor`         | `setTrackTintList`<br/>`getTrackTintList`                 | `null`\n**Color for track\'s active part**          | `app:trackColorActive`   | `setTrackActiveTintList`<br/>`getTrackActiveTintList`     | `?attr/colorPrimary`\n**Color for track\'s inactive part**        | `app:trackColorInactive` | `setTrackInactiveTintList`<br/>`getTrackInactiveTintList` | `?attr/colorSurfaceVariant`\n**Minimum separation for adjacent thumbs** | `app:minSeparation`      | `setMinSeparation`<br/>`getMinSeparation`                 | `0dp`\n\n**Note:** `app:trackColor` takes precedence over `app:trackColorActive` and\n`app:trackColorInative`. It\'s a shorthand for setting both values to the same\nthing.\n\n#### Thumb attributes\n\nElement          | Attribute              | Related method(s)                                                                 | Default value\n---------------- | ---------------------- | --------------------------------------------------------------------------------- | -------------\n**Color**        | `app:thumbColor`       | `setThumbTintList`<br/>`getThumbTintList`                                         | `?attr/colorPrimary`\n**Radius**       | `app:thumbRadius`      | `setThumbRadiusResource`<br/>`setThumbRadius`<br/>`getThumbRadius`                | `10dp`\n**Elevation**    | `app:thumbElevation`   | `setThumbElevationResource`<br/>`setThumbElevation`<br/>`getThumbElevation`       | `2dp`\n**Halo color**   | `app:haloColor`        | `setHaloTintList`<br/>`getHaloTintList`                                           | `?attr/colorPrimary` at 24%\n**Halo radius**  | `app:haloRadius`       | `setHaloRadiusResource`<br/>`setHaloRadius`<br/>`getHaloRadius`                   | `24dp`\n**Stroke color** | `app:thumbStrokeColor` | `setThumbStrokeColor`<br/>`setThumbStrokeColorResource`<br/>`getThumbStrokeColor` | `null`\n**Stroke width** | `app:thumbStrokeWidth` | `setThumbStrokeWidth`<br/>`setThumbStrokeWidthResource`<br/>`getThumbStrokeWidth` | `0dp`\n\n#### Value label attributes\n\nElement       | Attribute           | Related method(s)                           | Default value\n------------- | ------------------- | ------------------------------------------- | -------------\n**Style**     | `app:labelStyle`    | N/A                                         | `@style/Widget.Material3.Tooltip`\n**Formatter** | N/A                 | `setLabelFormatter`<br/>`hasLabelFormatter` | `null`\n**Behavior**  | `app:labelBehavior` | `setLabelBehavior`<br/>`getLabelBehavior`   | `floating`\n\n**Note:** The value label is a\n[Tooltip](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tooltip/TooltipDrawable.java).\n\n#### Tick mark attributes\n\nElement                             | Attribute                | Related method(s)                                       | Default value\n----------------------------------- | ------------------------ | ------------------------------------------------------- | -------------\n**Color**                           | `app:tickColor`          | `setTickTintList`<br/>`getTickTintList`                 | `null`\n**Color for tick\'s active part**    | `app:tickColorActive`    | `setTickActiveTintList`<br/>`getTickActiveTintList`     | `?attr/colorSurfaceVariant`\n**Color for tick\'s inactive part**  | `app:tickColorInactive`  | `setTickInactiveTintList`<br/>`getTickInactiveTintList` | `?attr/colorPrimary`\n**Radius for tick\'s active part**   | `app:tickRadiusActive`   | `setTickActiveRadius`<br/>`getTickActiveRadius`         | `1dp`\n**Radius for tick\'s inactive part** | `app:tickRadiusInactive` | `setTickInactiveRadius`<br/>`getTickInactiveRadius`     | `1dp`\n**Tick visible**                    | `app:tickVisible`        | `setTickVisible`<br/>`isTickVisible()`                  | `true`\n\n**Note:** `app:tickColor` takes precedence over `app:tickColorActive` and\n`app:tickColorInative`. It\'s a shorthand for setting both values to the same\nthing.\n\n#### Styles\n\nElement           | Style\n----------------- | -------------------------\n**Default style** | `Widget.Material3.Slider`\n\nDefault style theme attribute: `?attr/sliderStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/res/values/styles.xml)\nand\n[attributes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/res/values/attrs.xml).\n\n## Theming sliders\n\nSliders support\n[Material Theming](https://material.io/components/sliders#theming) which can\ncustomize color and typography.\n\n### Slider theming example\n\nAPI and source code:\n\n*   `Slider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/Slider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/Slider.java)\n*   `RangeSlider`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/slider/RangeSlider)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/slider/RangeSlider.java)\n\nThe following example shows a range slider with Material Theming.\n\n!["Slider theming example with pink and brown colors."](assets/slider/slider_theming.png)\n\n#### Implementing slider theming\n\nUse theme attributes and styles in `res/values/styles.xml` which applies to all\nsliders and affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="colorOnSurface">@color/shrine_pink_100</item>\n</style>\n```\n\nUse a default style theme attribute, styles and a theme overlay which applies to\nall sliders but does not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="sliderStyle">@style/Widget.App.Slider</item>\n</style>\n\n<style name="Widget.App.Slider" parent="Widget.Material3.Slider">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Slider</item>\n    <item name="labelStyle">@style/Widget.App.Tooltip</item>\n  </style>\n\n<style name="ThemeOverlay.App.Slider" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnPrimary">@color/shrine_pink_900</item>\n    <item name="colorOnSurface">@color/shrine_pink_100</item>\n</style>\n\n<style name="Widget.App.Tooltip" parent="Widget.Material3.Tooltip">\n    <item name="android:textAppearance">@style/TextAppearance.App.Tooltip</item>\n    <item name="backgroundTint">@color/shrine_pink_900</item>\n  </style>\n\n<style name="TextAppearance.App.Tooltip" parent="TextAppearance.Material3.BodySmall">\n  <item name="android:textColor">@color/shrine_pink_100</item>\n  <item name="fontFamily">@font/rubik</item>\n  <item name="android:fontFamily">@font/rubik</item>\n</style>\n```\n\nUse the style in the layout, which affects only this specific slider:\n\n```xml\n<com.google.android.material.slider.RangeSlider\n    ...\n    style="@style/Widget.App.Slider"  />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"slider"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\slider.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\slider.stories.jsx"})},"./stories/snackbar.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Snackbar"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"snackbar"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Snackbars"\nlayout: detail\nsection: components\nexcerpt: "Snackbars provide brief messages about app processes at the bottom of the screen."\niconId: toast\npath: /catalog/snackbars/\n--\x3e\n\n# Snackbars\n\n[Snackbars](https://material.io/components/snackbars) provide brief messages\nabout app processes at the bottom of the screen.\n\n![Photo grid: each photo has heart toggle button, 2 selected. Snackbar has\nupload error message and \'retry\' text\nbutton.](assets/snackbar/snackbar_hero.png)\n\n**Contents**\n\n*   [Using snackbars](#using-snackbars)\n*   [Snackbar](#snackbar)\n*   [Theming snackbars](#theming-snackbars)\n\n## Using snackbars\n\nBefore you can use Material snackbars, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\nThe `Snackbar` class provides static `make` methods to produce a snackbar\nconfigured in the desired way. These methods take a `View`, which will be used\nto find a suitable ancestor `ViewGroup` to display the snackbar, a text string\nto display, and a duration to display the snackbar. A suitable ancestor\n`ViewGroup` will be either the nearest `CoordinatorLayout` to the `View` passed\nin, or the root `DecorView` if none could be found.\n\nAvailable duration presets are:\n\n*   `LENGTH_INDEFINITE` (Show the snackbar until it\'s either dismissed or\n    another snackbar is shown)\n*   `LENGTH_LONG` (Show the snackbar for a long period of time)\n*   `LENGTH_SHORT` (Show the snackbar for a short period of time)\n\n**Note:** Snackbars work best if they are displayed inside of a\n[CoordinatorLayout](https://developer.android.com/reference/androidx/coordinatorlayout/widget/CoordinatorLayout),\nwhich allows the snackbar to enable behavior like swipe-to-dismiss.\n\n### Making snackbars accessible\n\nSnackbars support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in snackbars is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\n### Showing a snackbar\n\nCalling `make` creates the snackbar, but doesn\'t cause it to be visible on the\nscreen. To show it, use the `show` method on the returned `Snackbar` instance.\n\n**Note**: Only one snackbar will be shown at a time. Showing a new snackbar will\ndismiss any previous ones first.\n\nTo show a snackbar with a message and no action:\n\n```kt\n// The view used to make the snackbar.\n// This should be contained within the view hierarchy where you want to display\n// the snackbar. Generally it can be the view that triggered the snackbar,\n// such as a button that was clicked, or a card that was swiped.\nval contextView = findViewById<View>(R.id.context_view)\n\nSnackbar.make(contextView, R.string.text_label, Snackbar.LENGTH_SHORT)\n    .show()\n```\n\n### Adding an action\n\nTo add an action, use the `setAction` method on the object returned from `make`.\nSnackbars are automatically dismissed when the action is clicked.\n\nTo show a snackbar with a message and an action:\n\n```kt\nSnackbar.make(contextView, R.string.text_label, Snackbar.LENGTH_LONG)\n    .setAction(R.string.action_text) {\n        // Responds to click on the action\n    }\n    .show()\n```\n\n### Anchoring a snackbar\n\nBy default, `Snackbar`s will be anchored to the bottom edge of their parent\nview. However, you can use the `setAnchorView` method to make a `Snackbar`\nappear above a specific view within your layout, for example a\n`FloatingActionButton`.\n\n```kt\nSnackbar.make(...)\n    .setAnchorView(fab)\n    ...\n```\n\nThis is especially helpful if you would like to place a `Snackbar` above\nnavigational elements at the bottom of the screen, such as a `BottomAppBar` or\n`BottomNavigationView`.\n\n### Related concepts\n\nTemporary bottom bars can be implemented with other sorts of content layouts by\nsubclassing\n[BaseTransientBottomBar](https://developer.android.com/reference/com/google/android/material/snackbar/BaseTransientBottomBar).\n\nAndroid also provides a\n[Toast](https://developer.android.com/reference/android/widget/Toast.html) class\nwith a similar API that can be used for displaying system-level notifications.\nGenerally, snackbars are the preferred mechanism for displaying feedback\nmessages to users, because they can be displayed in the context of the UI where\nthe action occurred. Reserve `Toast` for cases where this cannot be done.\n\n## Snackbar\n\nSnackbars inform users of a process that an app has performed or will perform.\nThey appear temporarily, towards the bottom of the screen. They shouldn’t\ninterrupt the user experience, and they don’t require user input to disappear.\nThey disappear either after a timeout or after a user interaction elsewhere on\nthe screen, but can also be swiped off the screen.\n\nSnackbars can also offer the ability to perform an action, such as undoing an\naction that was just taken, or retrying an action that had failed.\n\n### Snackbars example\n\nAPI and source code:\n\n*   `Snackbar`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/Snackbar.java)\n\nThe following is an example of a snackbar with an action button:\n\n![Snackbar example with white text label and an action button with purple text](assets/snackbar/snackbar_example.png)\n\nIn code:\n\n```kt\nSnackbar.make(contextView, "Text label", Snackbar.LENGTH_LONG)\n    .setAction("Action") {\n        // Responds to click on the action\n    }\n    .show()\n```\n\n## Anatomy and key properties\n\nThe following is an anatomy diagram of a snackbar:\n\n![Snackbar anatomy diagram](assets/snackbar/snackbar_anatomy.png)\n\n1.  Text label\n1.  Container\n1.  Action (optional)\n\n### Text label attributes\n\nElement              | Attribute                | Related method(s) | Default value\n-------------------- | ------------------------ | ----------------- | -------------\n**Text label style** | N/A                      | N/A               | `?attr/snackbarTextViewStyle`\n**Text label**       | `android:text`           | `setText`         | `null`\n**Color**            | `android:textColor`      | `setTextColor`    | `?attr/colorOnSurfaceInverse`\n**Typography**       | `android:textAppearance` | N/A               | `?attr/textAppearanceBodyMedium`\n\n### Container attributes\n\nElement                 | Attribute                                              | Related method(s)                               | Default value\n----------------------- | ------------------------------------------------------ | ----------------------------------------------- | -------------\n**Color**               | `app:backgroundTint`                                   | `setBackgroundTint`<br/>`setBackgroundTintList` | `?attr/colorSurfaceInverse`\n**Color overlay alpha** | `app:backgroundOverlayColorAlpha`                      | N/A                                             | `0.8f` (ignored if `app:backgroundTint` is set)\n**Shape**               | `app:shapeAppearance`<br/>`app:shapeAppearanceOverlay` | N/A                                             | `?attr/shapeAppearanceCornerExtraSmall`\n**Margin**              | `android:layout_margin`                                | N/A                                             | `8dp`\n**Elevation**           | `app:elevation`                                        | N/A                                             | `6dp`\n**Animation mode**      | `app:animationMode`                                    | `setAnimationMode`<br/>`getAnimationMode`       | `fade`\n\n### Action attributes\n\nElement              | Attribute                  | Related method(s)    | Default value\n-------------------- | -------------------------- | -------------------- | -------------\n**Button style**     | N/A                        | N/A                  | `?attr/snackbarButtonStyle`\n**Text color alpha** | `app:actionTextColorAlpha` | N/A                  | `1.0f`\n**Text Color**       | `android:textColor`        | `setTextActionColor` | `?attr/colorPrimaryInverse`\n\n### Styles\n\nElement                 | **Theme attribute**           | **Default value**\n----------------------- | ----------------------------- | -----------------\n**Default style**       | `?attr/snackbarStyle`         | `@style/Widget.Material3.Snackbar`\n**Action button style** | `?attr/snackbarButtonStyle`   | `@style/Widget.Material3.Button.TextButton.Snackbar`\n**Text label style**    | `?attr/snackbarTextViewStyle` | `@style/Widget.Material3.Snackbar.TextView`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/res/values/attrs.xml).\n\n## Theming snackbars\n\nSnackbars support\n[Material Theming](https://material.io/design/material-theming/overview.html#using-material-theming)\nwhich can customize color and typography.\n\n### Snackbar theming example\n\nAPI and source code:\n\n*   `Snackbar`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/snackbar/Snackbar)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/snackbar/Snackbar.java)\n\nThe following is an example of a snackbar with an action button that uses the\nMaterial.io [Shrine](https://material.io/design/material-studies/shrine.html)\ncolor theming:\n\n!["Snackbar with brown container, pink text, and pink \'Action\' text button on\nlight grey screen"](assets/snackbar/snackbar_theming.png)\n\n#### Implementing snackbar theming\n\nUse theme attributes in `res/values/styles.xml` to style all snackbars. This\nwill affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimaryInverse">@color/shrine_pink_100</item>\n    <item name="colorOnSurfaceInverse">@color/shrine_pink_100</item>\n</style>\n\n```\n\nUse default style theme attributes, styles and theme overlays to style all\nsnackbars. This will not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="snackbarStyle">@style/Widget.App.Snackbar</item>\n    <item name="snackbarButtonStyle">@style/Widget.App.SnackbarButton</item>\n</style>\n\n<style name="Widget.App.Snackbar" parent="Widget.Material3.Snackbar">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Snackbar</item>\n  </style>\n\n<style name="Widget.App.SnackbarButton" parent="Widget.Material3.Button.TextButton.Snackbar">\n    <item name="android:textColor">@color/shrine_pink_100</item>\n</style>\n\n<style name="ThemeOverlay.App.Snackbar" parent="">\n    <item name="colorPrimaryInverse">@color/shrine_pink_100</item>\n    <item name="colorOnSurfaceInverse">@color/shrine_pink_100</item>\n</style>\n```\n\nSet style attributes in code, which only affects this snackbar:\n\n```kt\nSnackbar.make(contextView, "Text label", Snackbar.LENGTH_LONG)\n    .setAction("Action") {\n        // Responds to click on the action\n    }\n    .setBackgroundTint(resources.getColor(R.color.backgroundTint))\n    .setActionTextColor(resources.getColor(R.color.actionTextColor))\n    .show()\n```\n\nSet in `values/colors.xml`:\n\n```xml\n<color name="backgroundTint">@color/shrine_pink_900</color>\n<color name="actionTextColor">@color/shrine_pink_100</color>\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"snackbar"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\snackbar.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\snackbar.stories.jsx"})},"./stories/switch.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Switch"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"switch"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Material selection controls: Switches"\nlayout: detail\nsection: components\nexcerpt: "Selection controls allow the user to select options."\niconId: switch\npath: /catalog/switches/\n--\x3e\n\n# Selection controls: switches\n\n[Selection controls](https://material.io/components/selection-controls#usage)\nallow the user to select options.\n\n[Switches](https://m3.material.io/components/switch/overview) toggle the state\nof a single setting on or off. They are the preferred way to adjust settings on\nmobile devices.\n\n![White "Settings" menu with purple header and switches to turn on options, such\nas "Wi-fi" and "Bluetooth"](assets/switch/switch_hero.png)\n\n**Contents**\n\n*   [Using switches](#using-switches)\n*   [Switch](#switch)\n*   [Theming switches](#theming-switches)\n\n## Using switches\n\nBefore you can use Material switches, you need to add a dependency on the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n**Note:** The `MaterialSwitch` widget provides a complete implementation of\nMaterial Design\'s switch component. It extends from the support library\'s\n`SwitchCompat` widget, but not from the framework `Switch` widget. As such, it\ndoes not auto-inflate, unlike other selection controls, and must be explicitly\nspecified in layouts.\n\nUse switches to:\n\n*   Toggle a single item on or off, on mobile and tablet\n*   Immediately activate or deactivate something\n\n### Making switches accessible\n\nSwitches support content labeling for accessibility and are readable by most\nscreen readers, such as TalkBack. Text rendered in switches is automatically\nprovided to accessibility services. Additional content labels are usually\nunnecessary.\n\n## Switch\n\nA `Switch` represents a button with two states, on and off. Switches are most\noften used on mobile devices to enable and disable options in an options menu. A\nswitch consists of a track and thumb; the thumb moves along the track to\nindicate its current state.\n\n**Note:** Since version 1.7.0, the new `MaterialSwitch` class will replace the\nobsolete `SwitchMaterial` class. In most cases you should be able to just\nreplace all `SwitchMaterial` class reference with `MaterialSwitch` to achieve\nthe default look and feel. Please refer to the following sections if you need to\ncustomize the new styles.\n\n**Note:** For the old `SwitchMaterial` documentation, please refer to\n[Switch (deprecated)](#switch-deprecated) and\n[Theming switches (deprecated)](#theming-switches-deprecated).\n\n### Switches example\n\nAPI and source code:\n\n*   `MaterialSwitch`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/materialswitch/MaterialSwitch)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/materialswitch/MaterialSwitch.java)\n\nThe following example shows a list of five switches.\n\n![Example of 5 switches, the first one is toggled and the last one is disabled.](assets/switch/switch_example.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.materialswitch.MaterialSwitch\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:checked="true"\n    android:text="@string/label_1"/>\n<com.google.android.material.materialswitch.MaterialSwitch\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_2"/>\n<com.google.android.material.materialswitch.MaterialSwitch\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_3"/>\n<com.google.android.material.materialswitch.MaterialSwitch\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_4"/>\n<com.google.android.material.materialswitch.MaterialSwitch\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:enabled="false"\n    android:text="@string/label_5"/>\n```\n\nIn code:\n\n```kt\n// To check a switch\nmaterialSwitch.isChecked = true\n\n// To listen for a switch\'s checked/unchecked state changes\nmaterialSwitch.setOnCheckedChangeListener { buttonView, isChecked\n    // Responds to switch being checked/unchecked\n}\n```\n\n## Anatomy and key properties\n\nThe following is an anatomy diagram that shows a switch thumb and a switch\ntrack:\n\n![Switch anatomy diagram](assets/switch/switch_anatomy.png)\n\n1.  Track\n2.  Thumb\n3.  Icon (optional)\n\n### Switch attributes\n\nElement        | Attribute           | Related method(s)                 | Default value\n-------------- | ------------------- | --------------------------------- | -------------\n**Min height** | `android:minHeight` | `setMinHeight`<br/>`getMinHeight` | `?attr/minTouchTargetSize`\n\n### Thumb attributes\n\nElement   | Attribute       | Related method(s)                         | Default value\n--------- | --------------- | ----------------------------------------- | -------------\n**Thumb** | `android:thumb` | `setThumbDrawable`<br/>`getThumbDrawable` | `@drawable/mtrl_switch_thumb`\n**Color** | `app:thumbTint` | `setThumbTintList`<br/>`getThumbTintList` | `?attr/colorOutline` (unchecked)<br/>`?attr/colorOnPrimary` (checked)\n\n### Icon attributes\n\nYou can add an optional icon to enhance the on/off indication of your custom\nswitch by assigning `app:thumbIcon`. This icon will be centered and displayed on\ntop of the thumb drawable.\n\nElement    | Attribute             | Related method(s)                                 | Default value\n---------- |-----------------------|---------------------------------------------------| -------------\n**Icon**   | `app:thumbIcon`       | `setThumbIconDrawable`<br/>`getThumbIconDrawable` | `null`\n**Width**  | `app:thumbIconWidth`  | `setThumbIconWidth`<br/>`getThumbIconWidth`       | Intrinsic width\n**Height** | `app:thumbIconHeight` | `setThumbIconHeight`<br/>`getThumbIconHeight`     | Intrinsic height\n**Color**  | `app:thumbIconTint`   | `setThumbIconTintList`<br/>`getThumbIconTintList` | `?attr/colorSurfaceVariant` (unchecked)<br/>`?attr/colorOnPrimaryContainer` (checked)\n\n**Note:** Custom thumb icon width/height is supported only for API 23 and above.\nFor API < 23, the intrinsic size of the thumb icon will always be used.\n\n### Track attributes\n\nElement              | Attribute                 | Related method(s)                                             | Default value\n-------------------- | ------------------------- | ------------------------------------------------------------- | -------------\n**Track**            | `app:track`               | `setTrackDrawable`<br/>`getTrackDrawable`                     | `@drawable/mtrl_switch_track`\n**Color**            | `app:trackTint`           | `setTrackTintList`<br/>`getTrackTintList`                     | `?attr/colorSurfaceVariant` (unchecked)<br/>`?attr/colorPrimary` (checked)\n**Decoration**       | `app:trackDecoration`     | `setTrackDecorationDrawable`<br/>`getTrackDecorationDrawable` | `@drawable/mtrl_switch_track_decoration`<br/>(Shows an outline of the track.)\n**Decoration color** | `app:trackDecorationTint` | `setTrackDecorationTintList`<br/>`getTrackDecorationTintList` | `?attr/colorOutline` (unchecked)<br/>`@android:color/transparent` (checked)\n\n### Text label attributes\n\nElement        | Attribute                | Related method(s)                         | Default value\n-------------- | ------------------------ | ----------------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`                   | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColors`        | `?android:attr/textColorPrimaryDisableOnly`\n**Typography** | `android:textAppearance` | `setTextAppearance`                       | `?attr/textAppearanceBodyMedium`\n**Padding**    | `app:switchPadding`      | `setSwitchPadding`<br/>`getSwitchPadding` | `16dp`\n\n### Switch states\n\nSwitches can be on or off. Switches have enabled, hover, focused, and pressed\nstates.\n\n![Switch states in an array. Columns are enabled, disabled, hover, focused,\npressed. Rows are on or off](assets/switch/switch_states.png)\n\n### Styles\n\nElement           | Style\n----------------- | ------------------------------------------------\n**Default style** | `Widget.Material3.CompoundButton.MaterialSwitch`\n\nDefault style theme attribute: `?attr/materialSwitchStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/materialswitch/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/materialswitch/res/values/attrs.xml).\n\n## Theming switches\n\nSwitches support\n[Material Theming](https://material.io/components/selection-controls#theming),\nwhich can customize color and typography.\n\n### Switch theming example\n\nThe following example shows a list of switches with Material Theming.\n\n!["5 switches with brown text: first switch is on and has pink thumb and track"](assets/switch/switch_theming.png)\n\n#### Implementing switch theming\n\nUse theme attributes in `res/values/styles.xml`, which applies to all switches\nand affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimary">@color/pink_200</item>\n    <item name="colorSurfaceVariant">@color/pink_100</item>\n</style>\n\n```\n\nUse default style theme attributes, styles and theme overlays, which apply to\nall switches but do not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="materialSwitchStyle">@style/Widget.App.Switch</item>\n</style>\n\n<style name="Widget.App.Switch" parent="Widget.Material3.CompoundButton.MaterialSwitch">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Switch</item>\n</style>\n\n<style name="ThemeOverlay.App.Switch" parent="">\n    <item name="colorPrimary">@color/pink_200</item>\n    <item name="colorSurfaceVariant">@color/pink_100</item>\n</style>\n```\n\nUse the styles in the layout, which affects only this switch:\n\n```xml\n<com.google.android.material.materialswitch.MaterialSwitch\n        ...\n    style="@style/Widget.App.Switch"\n    />\n```\n\n## Switch (deprecated)\n\n### Switches example (deprecated)\n\nAPI and source code:\n\n*   `SwitchMaterial`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/switchmaterial/SwitchMaterial)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/SwitchMaterial.java)\n\nThe following example shows a list of five switches.\n\n![Example of 5 switches, the first one is toggled and the last one is disabled.](assets/switch/switch_example_deprecated.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:checked="true"\n    android:text="@string/label_1"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_2"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_3"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:text="@string/label_4"/>\n<com.google.android.material.switchmaterial.SwitchMaterial\n    android:layout_width="wrap_content"\n    android:layout_height="match_parent"\n    android:enabled="false"\n    android:text="@string/label_5"/>\n```\n\nIn code:\n\n```kt\n// To check a switch\nswitchmaterial.isChecked = true\n\n// To listen for a switch\'s checked/unchecked state changes\nswitchmaterial.setOnCheckedChangeListener { buttonView, isChecked\n    // Responds to switch being checked/unchecked\n}\n```\n\n## Anatomy and key properties (deprecated)\n\nThe following is an anatomy diagram that shows a switch thumb and a switch\ntrack:\n\n![Switch anatomy diagram](assets/switch/switch_anatomy_deprecated.png)\n\n1.  Thumb\n2.  Track\n\n### Switch attributes (deprecated)\n\nElement                    | Attribute                                  | Related method(s)                                          | Default value\n-------------------------- | ------------------------------------------ | ---------------------------------------------------------- | -------------\n**To use material colors** | `app:useMaterialThemeColors`               | `setUseMaterialThemeColors`<br/>`isUseMaterialThemeColors` | `true` (ignored if specific tint attrs are set)\n**Min size**               | `android:minWidth`<br/>`android:minHeight` | `(set/get)MinWidth`<br/>`(set/get)MinHeight`               | `?attr/minTouchTargetSize`\n\nThe color of the switch defaults to using `?attr/colorPrimary`,\n`?attr/colorPrimaryContainer`, `?attr/colorOnSurface`, and `?attr/colorOutline`\ndefined in your app theme. If you want to override this behavior, as you might\nwith a custom drawable that should not be tinted, set\n`app:useMaterialThemeColors` to `false`:\n\n```xml\n<com.google.android.material.switchmaterial.SwitchMaterial\n        ...\n    app:useMaterialThemeColors="false"\n    />\n```\n\n### Thumb attributes (deprecated)\n\nElement       | Attribute       | Related method(s)                         | Default value\n------------- | --------------- | ----------------------------------------- | -------------\n**Thumb**     | `android:thumb` | `setThumbDrawable`<br/>`getThumbDrawable` | inherits from `SwitchCompat`\n**Color**     | `app:thumbTint` | `setThumbTintList`<br/>`getThumbTintList` | `?attr/colorOnSurface` (unchecked)<br/>`?attr/colorPrimary` (checked)\n**Elevation** | N/A             | N/A                                       | `4dp`\n\n### Track attributes (deprecated)\n\nElement   | Attribute       | Related method(s)                         | Default value\n--------- | --------------- | ----------------------------------------- | -------------\n**Track** | `app:track`     | `setTrackDrawable`<br/>`getTrackDrawable` | inherits from `SwitchCompat`\n**Color** | `app:trackTint` | `setTrackTintList`<br/>`getTrackTintList` | `?attr/colorOutline` (unchecked)<br/>`?attr/colorPrimaryContainer` (checked)\n\n### Text label attributes (deprecated)\n\nElement        | Attribute                | Related method(s)                  | Default value\n-------------- | ------------------------ | ---------------------------------- | -------------\n**Text label** | `android:text`           | `setText`<br/>`getText`            | `null`\n**Color**      | `android:textColor`      | `setTextColor`<br/>`getTextColors` | `?android:attr/textColorPrimaryDisableOnly`\n**Typography** | `android:textAppearance` | `setTextAppearance`                | `?attr/textAppearanceBodyMedium`\n\n### Switch states (deprecated)\n\nSwitches can be on or off. Switches have enabled, hover, focused, and pressed\nstates.\n\nDisplay the outer radial reaction only on form factors that use touch, where\ninteraction may obstruct the element completely.\n\nFor desktop, the radial reaction isn\'t needed.\n\n![Switch states in an array. Columns are enabled, disabled, hover, focused,\npressed. Rows are on or off](assets/switch/switch_states_deprecated.png)\n\n### Styles (deprecated)\n\nElement           | Style\n----------------- | ----------------------------------------\n**Default style** | `Widget.Material3.CompoundButton.Switch`\n\nDefault style theme attribute: `?attr/switchStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/res/values/attrs.xml).\n\n## Theming switches (deprecated)\n\nSwitches support\n[Material Theming](https://material.io/components/selection-controls#theming),\nwhich can customize color and typography.\n\n### Switch theming example (deprecated)\n\nAPI and source code:\n\n*   `SwitchMaterial`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/switchmaterial/SwitchMaterial)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/switchmaterial/SwitchMaterial.java)\n\nThe following example shows a list of switches with Material Theming.\n\n!["5 switches with brown text: first switch is on and has pink thumb and track"](assets/switch/switch_theming_deprecated.png)\n\n#### Implementing switch theming (deprecated)\n\nUse theme attributes in `res/values/styles.xml`, which applies to all switches\nand affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimaryContainer">@color/pink_100</item>\n    <item name="colorPrimary">@color/pink_200</item>\n</style>\n\n```\n\nUse default style theme attributes, styles and theme overlays, which apply to\nall switches but do not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="switchStyle">@style/Widget.App.Switch</item>\n</style>\n\n<style name="Widget.App.Switch" parent="Widget.Material3.CompoundButton.Switch">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.Switch</item>\n</style>\n\n<style name="ThemeOverlay.App.Switch" parent="">\n    <item name="colorPrimaryContainer">@color/pink_100</item>\n    <item name="colorPrimary">@color/pink_200</item>\n</style>\n```\n\nUse the styles in the layout, which affects only this switch:\n\n```xml\n<com.google.android.material.switchmaterial.SwitchMaterial\n        ...\n    style="@style/Widget.App.Switch"\n    />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"switch"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\switch.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\switch.stories.jsx"})},"./stories/tabs.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Tabs"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"tabs"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Tabs"\nlayout: detail\nsection: components\nexcerpt: "Android tabs."\niconId: tabs\npath: /catalog/tabs/\n--\x3e\n\n# Tabs\n\n[Tabs](https://material.io/components/tabs/) organize content across different\nscreens, data sets, and other interactions.\n\n![Example travel app with Explore, Flights, and Trips tabs](assets/tabs/tabs-hero.png)\n\n**Contents**\n\n*   [Using tabs](#using-tabs)\n*   [Fixed tabs](#fixed-tabs)\n*   [Scrollable tabs](#scrollable-tabs)\n*   [Theming tabs](#theming-tabs)\n\n## Using tabs\n\nBefore you can use Material tabs, you need to add a dependency to the Material\nComponents for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n### Basic usage\n\n![Three fixed tabs with one tab selected.](assets/tabs/tabs_basic.png)\n\nA\n[`TabLayout`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\ncan be added to a layout:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content">\n\n    ...\n\n</com.google.android.material.tabs.TabLayout>\n```\n\n[`TabItem`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)s\ncan then be added as children of the `TabLayout` and adjusted as needed:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    ...>\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/text_label_1"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/text_label_2"\n        />\n\n    ...\n\n</com.google.android.material.tabs.TabLayout>\n```\n\nObserve changes to tab selections:\n\n```kt\ntabLayout.addOnTabSelectedListener(object : TabLayout.OnTabSelectedListener {\n\n    override fun onTabSelected(tab: TabLayout.Tab?) {\n        // Handle tab select\n    }\n\n    override fun onTabReselected(tab: TabLayout.Tab?) {\n        // Handle tab reselect\n    }\n\n    override fun onTabUnselected(tab: TabLayout.Tab?) {\n        // Handle tab unselect\n    }\n})\n```\n\n### Making tabs accessible\n\nThe Android tab components support screen reader descriptions for tabs and\nbadges. While optional, we strongly encourage their use.\n\n#### Content descriptions\n\nAdding a content description to the entire `TabLayout` can be done in XML with\nthe `android:contentDescription` attribute or programmatically:\n\n```kt\ntabLayout.contentDescription = contentDescription\n```\n\nContent descriptions can also be added to individual tabs:\n\n```kt\nval tab = tabLayout.getTabAt(index)\ntab?.contentDescription = contentDescription\n```\n\n`BadgeDrawable` also has a number of content description setters for different\nbadge states:\n\n```kt\nval badge = tab.getOrCreateBadge()\n\n// For badges with a number\nbadge.setContentDescriptionNumberless(contentDescription)\nbadge.setContentDescriptionQuantityStringsResource(R.string.content_description)\nbadge.setContentDescriptionExceedsMaxBadgeNumberStringResource(R.string.content_description)\n\n// For badges with a text\nbadge.setContentDescriptionForText(contentDescription)\n```\n\n### Using tabs with ViewPager\n\nA `TabLayout` can be set up with a\n[`ViewPager`](https://developer.android.com/reference/androidx/viewpager/widget/ViewPager)\nin order to:\n\n*   Dynamically create `TabItem`s based on the number of pages, their titles,\n    etc.\n*   Synchronize the selected tab and tab indicator position with page swipes\n\nFirst, your\n[`PagerAdapter`](https://developer.android.com/reference/androidx/viewpager/widget/PagerAdapter)\n(or subclass) needs to override the `getPageTitle` function in order to set the\ntab text label:\n\n```kt\nclass Adapter : PagerAdapter() {\n\n    ...\n\n    override fun getPageTitle(position: Int): CharSequence? {\n        // Return tab text label for position\n    }\n}\n```\n\nAfter the adapter has been set on the `ViewPager`, synchronize the `TabLayout`:\n\n```kt\ntabLayout.setupWithViewPager(viewPager)\n```\n\nFurther customization of the dynamically-created `TabItem`s (such as setting\nicons) needs to be done separately:\n\n```kt\nval tab = tabLayout.getTabAt(index)\ntab?.icon = drawable\n```\n\n### Using tabs with ViewPager2\n\nSetting up a `TabLayout` with a\n[`ViewPager2`](https://developer.android.com/reference/androidx/viewpager2/widget/ViewPager2)\nrelies on the same concepts as doing so with a `ViewPager`, but the\nimplementation is different. Everything is handled by the\n[`TabLayoutMediator`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayoutMediator.java)\nclass:\n\n```kt\nTabLayoutMediator(tabLayout, viewPager2) { tab, position ->\n    when (position) {\n        0 -> {\n            tab.text = textLabel1\n            tab.icon = drawable1\n        }\n        1 -> {\n            tab.text = textLabel2\n            tab.icon = drawable2\n        }\n        ...\n    }\n}.attach()\n```\n\n### Adding badges to tabs\n\n![Example of 3 fixed tabs with badges: a red badge with "1", a red badge with\n"88", and a red badge with "999".](assets/tabs/tabs_badged.png)\n\nTabs support badging with the\n[`BadgeDrawable`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/badge/BadgeDrawable.java)\nclass:\n\n```kt\n// Get badge from tab (or create one if none exists)\nval badge = tab.getOrCreateBadge()\n// Customize badge\nbadge.number = number\n// Remove badge from tab\ntab.removeBadge()\n```\n\n### Types\n\nThere are two types of tabs: 1. [Fixed tabs](#fixed-tabs), 2.\n[Scrollable tabs](#scrollable-tabs)\n\n![Composite image: Pets with Dogs, Cats, and Birds tabs; Dog breeds with\nPitbulls, Terrier, Poodle, Labrador (partial)](assets/tabs/tabs-types.png)\n\n## Fixed tabs\n\nFixed tabs display all tabs on one screen, with each tab at a fixed width. The\nwidth of each tab is determined by dividing the number of tabs by the screen\nwidth. They don’t scroll to reveal more tabs; the visible tab set represents the\nonly tabs available.\n\n### Fixed tabs example\n\nAPI and source code:\n\n*   `TabLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\n*   `TabItem`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabItem)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)\n\nThe following example shows a row of fixed tabs.\n\n![Example of 3 fixed tabs.](assets/tabs/tabs_fixed.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    app:tabMode="fixed">\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_1"\n        android:icon="@drawable/ic_favorite_24dp"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_2"\n        android:icon="@drawable/ic_music_24dp"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_3"\n        android:icon="@drawable/ic_search_24dp"\n        />\n\n</com.google.android.material.tabs.TabLayout>\n```\n\n## Scrollable tabs\n\nScrollable tabs are displayed without fixed widths. They are scrollable, such\nthat some tabs will remain off-screen until scrolled.\n\n### Scrollable tabs example\n\nAPI and source code:\n\n*   `TabLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\n*   `TabItem`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabItem)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)\n\nThe following example shows a row of scrollable tabs.\n\n![Example of 6 scrollable tabs, with the 6th partially cut off by screensize.](assets/tabs/tabs_scrollable.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    app:tabMode="scrollable"\n    app:tabContentStart="56dp">\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_1"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_2"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_3"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_4"\n        />\n\n    <com.google.android.material.tabs.TabItem\n        android:layout_width="wrap_content"\n        android:layout_height="wrap_content"\n        android:text="@string/tab_5"\n        />\n    ...\n</com.google.android.material.tabs.TabLayout>\n```\n\n### Anatomy and key properties\n\nTabs have a container and each tab item has an optional icon and text label. Tab\nitems can be in an active or inactive state. The tab indicator is shown below\nthe active tab item.\n\n![Tabs anatomy diagram](assets/tabs/tabs-anatomy.png)\n\n1.  Container\n2.  Active icon (optional if there’s a label)\n3.  Active text label (optional if there’s an icon)\n4.  Active tab indicator\n5.  Inactive icon (optional if there’s a label)\n6.  Inactive text label (optional if there’s an icon)\n7.  Tab item\n\n### Container attributes\n\nElement       | Attribute            | Related method(s)                  | Default value\n------------- | -------------------- | ---------------------------------- | -------------\n**Color**     | `android:background` | `setBackground`<br>`getBackground` | `?attr/colorOnSurfaceVariant`\n**Elevation** | `android:elevation`  | `setElevation`                     | `0dp`\n**Height**    | N/A                  | N/A                                | `48dp` (inline text) or `72dp` (non-inline text and icon)\n**Tab mode**  | `tabMode`            | `setTabMode`<br>`getTabMode`       | `fixed`\n\n### Tab item icon attributes\n\nElement   | Attribute      | Related method(s)                                                | Default value\n--------- | -------------- | ---------------------------------------------------------------- | -------------\n**Icon**  | `android:icon` | `setIcon`<br>`getIcon`                                           | `null`\n**Color** | `tabIconTint`  | `setTabIconTint`<br>`setTabIconTintResource`<br>`getTabIconTint` | `colorOnSurfaceVariant` and `colorPrimary` (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/color/m3_tabs_icon_color.xml))\n\n### Tab item text label attributes\n\nElement                   | Attribute                   | Related method(s)                                               | Default value\n------------------------- | --------------------------- | --------------------------------------------------------------- | -------------\n**Text**                  | `android:text`              | `setText`<br>`getText`                                          | `null`\n**Color**                 | `tabTextColor`              | `setTabTextColors`<br>`getTabTextColors`                        | `colorOnSurfaceVariant` and `colorPrimary` (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/color/m3_tabs_icon_color.xml))\n**Typography**            | `tabTextAppearance`         | N/A                                                             | `?attr/textAppearanceTitleSmall`\n**Active tab typography** | `tabSelectedTextAppearance` | N/A                                                             | None; will use `tabTextAppearance` instead\n**Inline label**          | `tabInlineLabel`            | `setInlineLabel`<br>`setInlineLabelResource`<br>`isInlineLabel` | `false`\n\n**Note:** When using `tabSelectedTextAppearance`, you must have matching text\nattributes in `tabTextAppearance` to avoid unintended behavior.\n\n### Tab item container attributes\n\nElement              | Attribute                                                                                     | Related method(s)                                                            | Default value\n-------------------- | --------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- | -------------\n**Ripple color**     | `tabRippleColor`                                                                              | `setTabRippleColor`<br>`setTabRippleColorResource`<br>`getTabRippleColor`    | `colorOnSurfaceVariant` at 16% opacity and `colorPrimary` at 16% opacity (activated) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/color/m3_tabs_ripple_color.xml))\n**Unbounded ripple** | `tabUnboundedRipple`                                                                          | `setUnboundedRipple`<br>`setUnboundedRippleResource`<br>`hasUnboundedRipple` | `true`\n**Gravity**          | `tabGravity`                                                                                  | `setTabGravity`<br>`getTabGravity`                                           | `fill`\n**Min width**        | `tabMinWidth`                                                                                 | N/A                                                                          | `72dp` (scrollable) or `wrap_content`\n**Max width**        | `tabMaxWidth`                                                                                 | N/A                                                                          | `264dp`\n**Padding**          | `tabPaddingStart`<br>`tabPaddingEnd`<br>`tabPaddingTop`<br>`tabPaddingBottom`<br>`tabPadding` | N/A                                                                          | `12dp`<br>`12dp`<br>`0dp`<br>`0dp`<br>`0dp`\n\n### Tab indicator attributes\n\nElement                | Attribute                       | Related method(s)                                                | Default value\n---------------------- | ------------------------------- | ---------------------------------------------------------------- | -------------\n**Color**              | `tabIndicatorColor`             | `setSelectedTabIndicatorColor`                                   | `colorPrimary`\n**Drawable**           | `tabIndicator`                  | `setSelectedTabIndicator`<br>`getSelectedTabIndicator`           | [`m3_tabs_rounded_line_indicator`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/drawable/m3_tabs_rounded_line_indicator.xml)\n**Height**             | `tabIndicatorHeight`            | `setSelectedTabIndicatorHeight`                                  | `2dp`\n**Full width**         | `tabIndicatorFullWidth`         | `setTabIndicatorFullWidth`<br>`isTabIndicatorFullWidth`          | `false`\n**Animation mode**     | `tabIndicatorAnimationMode`     | `setTabIndicatorAnimationMode`<br>`getTabIndicatorAnimationMode` | `elastic`\n**Gravity**            | `tabIndicatorGravity`           | `setSelectedTabIndicatorGravity`<br>`getTabIndicatorGravity`     | `bottom`\n**Animation duration** | `tabIndicatorAnimationDuration` | N/A                                                              | `250`\n\n### Styles\n\nElement                            | Style\n---------------------------------- | --------------------------------------\n**Default style**                  | `Widget.Material3.TabLayout`\n**Style for elevateable surfaces** | `Widget.Material3.TabLayout.OnSurface`\n**Primary secondary color style**  | `Widget.Material3.TabLayout.Secondary`\n\nDefault style theme attribute: `?attr/tabStyle`\n\nAdditional style theme attributes: `?attr/tabSecondaryStyle`\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/res/values/attrs.xml).\n\n## Theming tabs\n\nTabs support\n[Material Theming](https://material.io/components/app-bars-bottom/#theming)\nwhich can customize color and typography.\n\n### Tabs theming example\n\nAPI and source code:\n\n*   `TabLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabLayout.java)\n*   `TabItem`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/tabs/TabItem)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/tabs/TabItem.java)\n\nThe following example shows a row of scrollable tabs with Material Theming.\n\n![Example of 4 scrollable tabs with light pink background. The selected text is\ndark pink, the unselected text is grey.](assets/tabs/tabs_theming.png)\n\n#### Implementing tabs theming\n\nUse theme attributes and styles in `res/values/styles.xml` which applies to all\ntabs and affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="textAppearanceLabelLarge">@style/TextAppearance.App.LabelLarge</item>\n</style>\n\n<style name="TextAppearance.App.LabelLarge" parent="TextAppearance.Material3.LabelLarge">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n```\n\nUse default style theme attributes, styles and theme overlays, which apply to\nall tabs but do not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="tabStyle">@style/Widget.App.LabelLarge</item>\n</style>\n\n<style name="Widget.App.TabLayout" parent="Widget.Material3.TabLayout">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.TabLayout</item>\n    <item name="tabTextAppearance">@style/TextAppearance.App.LabelLarge</item>\n</style>\n\n<style name="ThemeOverlay.App.TabLayout" parent="">\n    <item name="colorPrimary">@color/shrine_pink_900</item>\n    <item name="colorSurface">@color/shrine_pink_light</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n</style>\n```\n\nUse the style in the layout, which affects only these tabs:\n\n```xml\n<com.google.android.material.tabs.TabLayout\n    ...\n    style="@style/Widget.App.TabLayout"\n    />\n```\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"tabs"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\tabs.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\tabs.stories.jsx"})},"./stories/textfield.stories.jsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"Example",(function(){return Example}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/react/index.js");var _storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./node_modules/@storybook/addon-docs/blocks.js"),_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@storybook/native-components/dist/index.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./node_modules/react/jsx-runtime.js");__webpack_exports__.default={title:"Textfield"};var Example=function Example(props){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_native_components__WEBPACK_IMPORTED_MODULE_3__.EmulatorRenderer,{apiKey:"kcfvhstvvpfhk5gkrzrndj36re",platform:"android",storyParams:{component:"textfield"},deepLinkBaseUrl:"sb-native://deep.link",extraParams:props})};Example.displayName="Example",Example.parameters={docs:{page:function page(){return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_4__.jsx)(_storybook_addon_docs_blocks__WEBPACK_IMPORTED_MODULE_2__.a,{markdown:'\x3c!--docs:\ntitle: "Text Fields"\nlayout: detail\nsection: components\nexcerpt: "A text field with an animated floating label and other Material Design features."\niconId: text_field\npath: /catalog/text-fields/\n--\x3e\n\n# Text fields\n\n[Text fields](https://material.io/components/text-fields) let users enter and\nedit text.\n\n!["Text fields on a screen"](assets/textfields/textfields_hero.png)\n\n**Contents**\n\n*   [Using text fields](#using-text-fields)\n*   [Filled text field](#filled-text-field)\n*   [Outlined text field](#outlined-text-field)\n*   [Theming](#theming-text-fields)\n\n## Using text fields\n\nBefore you can use Material text fields, you need to add a dependency to the\nMaterial Components for Android library. For more information, go to the\n[Getting started](https://github.com/material-components/material-components-android/tree/master/docs/getting-started.md)\npage.\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id="@+id/textField"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:hint="@string/label">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Note:** A text field is composed of a `TextInputLayout` and a\n`TextInputEditText` as a direct child. Using an `EditText` as the child might\nwork, but `TextInputEditText` provides accessibility support for the text field\nand allows `TextInputLayout` greater control over the visual aspects of the\ninput text. If an `EditText` is being used, make sure to set its\n`android:background` to `@null` so that `TextInputLayout` can set the proper\nbackground on it.\n\n### Making text fields accessible\n\nAndroid\'s text field component APIs support both label text and helper text,\nwhich explain what is requested for a text field. While optional, their use is\nstrongly encouraged.\n\n#### Content description\n\nWhen using **custom icons**, you should set a content description on them so\nthat screen readers, like TalkBack, are able to announce their purpose or\naction.\n\nFor the leading icon, that can be achieved via the\n`app:startIconContentDescription` attribute or `setStartIconContentDescription`\nmethod. For the trailing icon, that can be achieved via the\n`app:endIconContentDescription` attribute or `setEndIconContentDescription`\nmethod.\n\nWhen setting an **error message** that contains special characters that screen\nreaders or other accessibility systems are not able to read, you should set a\ncontent description via the `app:errorContentDescription` attribute or\n`setErrorContentDescription` method. That way the error will announce the\ncontent description instead of the error message.\n\n**Note:** Icons that don\'t have click listeners set on them work as decorative\nelements, and are therefore skipped by screen readers.\n\n#### Custom `EditText`\n\nIf you are using a custom `EditText` as `TextInputLayout`\'s child and your text\nfield requires different accessibility support than the one offered by\n`TextInputLayout`, you can set a `TextInputLayout.AccessibilityDelegate` via the\n`setTextInputAccessibilityDelegate` method. This method should be used in place\nof providing an `AccessibilityDelegate` directly on the `EditText`.\n\n### Adding a leading icon to a text field\n\n!["Text field with a leading icon."](assets/textfields/textfields_leading_icon.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:startIconDrawable="@drawable/ic_search_24dp"\n    app:startIconContentDescription="@string/content_description_start_icon">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Adding a trailing icon to a text field\n\n**Password toggle:**\n\n!["Text field with a password toggle trailing icon."](assets/textfields/textfields_trailing_icon_password_toggle.png)\n\nWhen the `TextInputEditText` is set to display a password, an icon can be added\nto toggle between masking the password or displaying the password as plain-text.\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:endIconMode="password_toggle">\n\n    <com.google.android.material.textfield.TextInputEditText\n        ...\n        android:inputType="textPassword"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Clear text:**\n\n!["Text field with a clear text trailing icon."](assets/textfields/textfields_trailing_icon_clear_text.png)\n\nAn icon can be set to display when text is present. The icon can be pressed to\nclear the input text.\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:endIconMode="clear_text">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Custom icon:**\n\n!["Text field with a custom trailing icon."](assets/textfields/textfields_trailing_icon_custom.png)\n\nIt is possible to set a custom `Drawable` as the text field\'s trailing icon via\n`app:endIconMode="custom"`. You should specify a drawable and content\ndescription for the icon, and you have the option to specify custom behaviors.\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:endIconMode="custom"\n    app:endIconDrawable="@drawable/ic_accelerator_24dp"\n    app:endIconContentDescription="@string/content_description_end_icon">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nOptionally, in code:\n\n```kt\ntextField.setEndIconOnClickListener {\n  // Respond to end icon presses\n}\n\ntextField.addOnEditTextAttachedListener {\n  // If any specific changes should be done when the edit text is attached (and\n  // thus when the trailing icon is added to it), set an\n  // OnEditTextAttachedListener.\n\n  // Example: The clear text icon\'s visibility behavior depends on whether the\n  // EditText has input present. Therefore, an OnEditTextAttachedListener is set\n  // so things like editText.getText() can be called.\n}\n\ntextField.addOnEndIconChangedListener {\n  // If any specific changes should be done if/when the endIconMode gets\n  // changed, set an OnEndIconChangedListener.\n\n  // Example: If the password toggle icon is set and a different EndIconMode\n  // gets set, the TextInputLayout has to make sure that the edit text\'s\n  // TransformationMethod is still PasswordTransformationMethod. Because of\n  // that, an OnEndIconChangedListener is used.\n}\n```\n\n**Note:** You should opt to use the `EndIconMode` API instead of setting an\nend/right compound `Drawable` on the `TextInputEditText`. The same applies to\nthe now-deprecated `passwordToggle*` attributes.\n\n**Important:** Calling `setEndIconMode` will initialize the icon with its\ndefault features, such as default drawables, and in the case of the custom mode,\nan empty drawable. You can add customizations after calling `setEndIconMode`.\nThe exception for this is if a drawable was specified in XML via the\n`app:endIconDrawable` attribute. An end icon drawable set in XML will take\nprecedence and override an existing default icon.\n\nSee the full list of\n[end icon modes](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/attrs.xml#L149).\n\n### Implementing an exposed dropdown menu\n\n!["Text field with an exposed dropdown menu."](assets/menu/menus_exposed_dropdown_outlined.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    style="@style/Widget.Material3.TextInputLayout.*.ExposedDropdownMenu">\n\n    <AutoCompleteTextView\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n        android:inputType="none"\n        app:simpleItems="@array/simple_items"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nThe string array specified by `app:simpleItems` will be used as the default\nitem strings for auto-completion. Or you can also set it programmatically:\n\n```kt\nval items = arrayOf("Item 1", "Item 2", "Item 3", "Item 4")\n(textField.editText as? MaterialAutoCompleteTextView)?.setSimpleItems(items)\n```\n\nAlternatively, to have more control over the auto-completion items rendering,\nyou can also provide a custom item adapter by:\n\n```kt\nval items = listOf("Item 1", "Item 2", "Item 3", "Item 4")\nval adapter = ArrayAdapter(requireContext(), R.layout.list_item, items)\n(textField.editText as? AutoCompleteTextView)?.setAdapter(adapter)\n```\n\nAnd a custom item layout (`list_item.xml`):\n\n```xml\n<TextView\n    xmlns:android="http://schemas.android.com/apk/res/android"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:padding="16dp"\n    android:ellipsize="end"\n    android:maxLines="1"\n    android:textAppearance="?attr/textAppearanceTitleMedium"\n/>\n```\n\n### Adding helper text to a text field\n\n!["Text field with helper text."](assets/textfields/textfields_helper_text.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:helperTextEnabled="true"\n    app:helperText="@string/helper_text">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Adding a counter to a text field\n\n!["Text field with a counter."](assets/textfields/textfields_counter.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:counterEnabled="true"\n    app:counterMaxLength="20">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Adding errors to a text field\n\n!["Text field with an error."](assets/textfields/textfields_error.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:errorEnabled="true">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nIn code:\n\n```kt\n// Set error text\npasswordLayout.error = getString(R.string.error)\n\n// Clear error text\npasswordLayout.error = null\n```\n\n**Note:** Non-null error text will replace any existing helper text, and\nnon-null helper text will replace any existing error text.\n\n### Adding a prefix/suffix to a text field\n\n!["Text field with a prefix/suffix."](assets/textfields/textfields_prefix_suffix.png)\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    app:prefixText="@string/prefix"\n    app:suffixText="@string/suffix">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n### Text field dimensions\n\nThe recommended default `android:layout_width` is `245dp`.\n\nBy default, text fields have a maximum width of `488dp`, and a minimum width of\n`56dp` for layouts without a label. If a label is present, the minimum width\nrecommended is `88dp`. `android:minWidth` and `android:maxWidth` (as well as\n`android:minEms` and `android:maxEms`) should be set on the `TextInputLayout`\ninstead of on the `TextInputEditText` to avoid unintended behaviors.\n\nYou can override those values in a custom style that inherits from a\n`TextInputLayout` style or by making changes directly on the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id="@+id/textField"\n    android:layout_width="wrap_content"\n    android:layout_height="wrap_content"\n    android:minWidth="@dimen/custom_min_width"\n    android:maxWidth="@dimen/custom_max_width"\n    android:hint="@string/label">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Note:** The `android:layout_width` of the `TextInputLayout` should be\n`wrap_content` in order for those minimum and maximum dimensions to be used.\n\n### Using text fields programmatically\n\nIf you construct the `TextInputEditText` child of a `TextInputLayout`\nprogrammatically, you should use `TextInputLayout`\'s context to create the view.\nThis will allow `TextInputLayout` to pass along the appropriate styling to the\nedit text.\n\n```kt\nval textInputLayout = TextInputLayout(context)\nval editText = TextInputEditText(textInputLayout.context)\n```\n\n### Types\n\nThere are two types of text fields: 1. [Filled text field](#filled-text-field),\n2. [Outlined text field](#outlined-text-field)\n\n!["Text field types. Fixed: grey back, dark gray indicator turns purple.\nOutlined: clear back, gray outline turns\npurple"](assets/textfields/text-field-generic.png)\n\n## Filled text field\n\n[Filled text fields](https://material.io/components/text-fields/#filled-text-field)\nhave more visual emphasis than outlined text fields, making them stand out when\nsurrounded by other content and components.\n\n### Filled text field examples\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `TextInputEditText`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputEditText)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputEditText.java)\n\nThe following example shows a filled text field with a label.\n\n![Filled text field](assets/textfields/textfields_filled.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    style="?attr/textInputFilledStyle"\n    android:id="@+id/filledTextField"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:hint="@string/label">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nIn code:\n\n```kt\n// Get input text\nval inputText = filledTextField.editText?.text.toString()\n\nfilledTextField.editText?.doOnTextChanged { inputText, _, _, _ ->\n    // Respond to input text change\n}\n```\n\nSee the [using text fields](#using-text-fields) section above for more examples.\n\n### Anatomy and key properties\n\nA filled text field has a filled container, input text, a label, an activation\nindicator, optional helper/error text and optional leading/trailing icons.\n\n![Filled text field anatomy](assets/textfields/textfields_filled_anatomy.png)\n\n1.  Container\n2.  Leading icon\n3.  Label\n4.  Input text\n5.  Trailing icon\n6.  Activation indicator\n7.  Helper/error/counter text\n8.  Prefix/suffix/placeholder (not shown)\n\n#### Container attributes\n\nElement                | Attribute                | Related method(s)                                                                       | Default value\n---------------------- | ------------------------ | --------------------------------------------------------------------------------------- | -------------\n**Color**              | `app:boxBackgroundColor` | `setBoxBackgroundColor`<br/>`setBoxBackgroundColorResource`<br/>`getBoxBackgroundColor` | `?attr/colorSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_filled_background_color.xml))\n**Shape**              | `app:shapeAppearance`    | N/A                                                                                     | `?attr/shapeAppearanceSmallComponent`\n**Text field enabled** | `android:enabled`        | `setEnabled`                                                                            | `true`\n\n#### Leading icon attributes\n\nElement                 | Attribute                         | Related method(s)                                                     | Default value\n----------------------- | --------------------------------- | --------------------------------------------------------------------- | -------------\n**Icon**                | `app:startIconDrawable`           | `setStartIconDrawable`<br/>`getStartIconDrawable`                     | `null`\n**Content description** | `app:startIconContentDescription` | `setStartIconContentDescription`<br/>`getStartIconContentDescription` | `null`\n**Color**               | `app:startIconTint`               | `setStartIconTintList`                                                | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Checkable**           | `app:startIconCheckable`          | `setStartIconCheckable`<br/>`isStartIconCheckable`                    | `false`\n**Size**                | `app:startIconMinSize`            | `setStartIconMinSize`<br/>`getStartIconMinSize`                       | `48dp`\n**Scale type**          | `app:startIconScaleType`          | `setStartIconScaleType` <br/> `getStartIconScaleType`                 | `ScaleType.CENTER`\n\n#### Label attributes\n\nElement                        | Attribute                  | Related method(s)                                       | Default value\n------------------------------ | -------------------------- | ------------------------------------------------------- | -------------\n**Text**                       | `android:hint`             | `setHint`<br/>`getHint`                                 | `null`\n**Color**                      | `android:textColorHint`    | `setDefaultHintTextColor`<br/>`getDefaultHintTextColor` | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_label_color.xml))\n**Collapsed (floating) color** | `app:hintTextColor`        | `setHintTextColor`<br/>`getHintTextColor`               | `?attr/colorPrimary` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_label_color.xml))\n**Typography**                 | `app:hintTextAppearance`   | `setHintTextAppearance`                                 | `?attr/textAppearanceBodySmall`\n**Animation**                  | `app:hintAnimationEnabled` | `setHintAnimationEnabled`<br/>`isHintAnimationEnabled`  | `true`\n**Expanded enabled**           | `app:expandedHintEnabled`  | `setExpandedHintEnabled`<br/>`isExpandedHintEnabled`    | `true`\n\n**Note:** The `android:hint` should always be set on the `TextInputLayout`\ninstead of on the `EditText` in order to avoid unintended behaviors.\n\n#### Input text attributes (set on the `TextInputEditText`)\n\nElement                  | Attribute                                                                | Related method(s)                                            | Default value\n------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------ | -------------\n**Input text**           | `android:text`                                                           | `setText`<br/>`getText`                                      | `@null`\n**Typography**           | `android:textAppearance`                                                 | `setTextAppearance`                                          | `?attr/textAppearanceBodyLarge`\n**Input text color**     | `android:textColor`                                                      | `setTextColor`<br/>`getTextColors`<br/>`getCurrentTextColor` | `?attr/colorOnSurface`\n**Cursor color**         | N/A (color comes from the theme attr `?attr/colorControlActivated`)      | N/A                                                          | `?attr/colorPrimary`\n**Text highlight color** | N/A (color comes from the theme attr `?android:attr/textColorHighlight`) | N/A                                                          | [`@color/m3_highlighted_text`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_highlighted_text.xml)\n\n#### Input text attributes (set on the `TextInputLayout`)\n\nElement                  | Attribute                                | Related method(s)                                                     | Default value\n------------------------ |------------------------------------------|-----------------------------------------------------------------------| -------------\n**Cursor color**         | `app:cursorColor` on API levels 28+      | `setCursorColor`<br/>`getCursorColor`<br/>on API levels 28+           | `@null` (uses `?attr/colorControlActivated` by default)\n**Cursor error color**   | `app:cursorErrorColor` on API levels 28+ | `setCursorErrorColor`<br/>`getCursorErrorColor`<br/>on API levels 28+ | `?attr/colorError` on API levels 28+, `?attr/colorControlActivated` otherwise\n\n\n#### Trailing icon attributes\n\nElement                             | Attribute                       | Related method(s)                                                 | Default value\n----------------------------------- | ------------------------------- | ----------------------------------------------------------------- | -------------\n**Mode**                            | `app:endIconMode`               | `setEndIconMode`<br/>`getEndIconMode`                             | `END_ICON_NONE`\n**Color**                           | `app:endIconTint`               | `setEndIconTintList`                                              | `colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Custom icon**                     | `app:endIconDrawable`           | `setEndIconDrawable`<br/>`getEndIconDrawable`                     | `null`\n**Custom icon content description** | `app:endIconContentDescription` | `setEndIconContentDescription`<br/>`getEndIconContentDescription` | `null`\n**Custom icon checkable**           | `app:endIconCheckable`          | `setEndIconCheckable`<br/>`isEndIconCheckable`                    | `true`\n**Error icon**                      | `app:errorIconDrawable`         | `setErrorIconDrawable`<br/>`getErrorIconDrawable`                 | [`@drawable/mtrl_ic_error`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/drawable/mtrl_ic_error.xml)\n**Error icon color**                | `app:errorIconTint`             | `setErrorIconTintList`                                            | `?attr/colorError`\n**Size**                            | `app:endIconMinSize`            | `setEndIconMinSize`<br/>`getEndIconMinSize`                       | `48dp`\n**Scale type**                      | `app:endIconScaleType`          | `setEndIconScaleType` <br/> `getEndIconScaleType`                 | `ScaleType.CENTER`\n\n#### Activation indicator attributes\n\nElement           | Attribute                   | Related method(s)                                                            | Default value\n----------------- | --------------------------- | ---------------------------------------------------------------------------- | -------------\n**Color**         | `app:boxStrokeColor`        | `setBoxStrokeColor`<br/>`setBoxStrokeColorStateList`<br/>`getBoxStrokeColor` | `?attr/colorOutline` and `?attr/colorPrimary` (focused) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_stroke_color.xml))\n**Error color**   | `app:boxStrokeErrorColor`   | `setBoxStrokeErrorColor`<br/>`getBoxStrokeErrorColor`                        | `?attr/colorError`\n**Width**         | `app:boxStrokeWidth`        | N/A                                                                          | `1dp`\n**Focused width** | `app:boxStrokeWidthFocused` | N/A                                                                          | `2dp`\n\n#### Helper/error/counter text attributes\n\n| Element                                  | Attribute                                                           | Related method(s)                                                                                                   | Default value                                                                                                                                                                                                                                                                                                                                |\n|------------------------------------------|---------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Helper text enabled**                  | `app:helperTextEnabled`                                             | `setHelperTextEnabled`<br/>`isHelperTextEnabled`                                                                    | `false`                                                                                                                                                                                                                                                                                                                                      |\n| **Helper text**                          | `app:helperText`                                                    | `setHelperText`<br/>`getHelperText`                                                                                 | `null`                                                                                                                                                                                                                                                                                                                                       |\n| **Helper text color**                    | `app:helperTextColor`                                               | `setHelperTextColor`<br/>`getHelperTextColor`                                                                       | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))                                                                                  |\n| **Helper text typography**               | `app:helperTextAppearance`                                          | `setHelperTextAppearance`                                                                                           | `?attr/textAppearanceBodySmall`                                                                                                                                                                                                                                                                                                              |\n| **Error text enabled**                   | `app:errorEnabled`                                                  | `setErrorEnabled`<br/>`isErrorEnabled`                                                                              | `false`                                                                                                                                                                                                                                                                                                                                      |\n| **Error text**                           | N/A                                                                 | `setError`<br/>`getError`                                                                                           | `null`                                                                                                                                                                                                                                                                                                                                       |\n| **Error text accessibility live region** | `app:errorAccessibilityLiveRegion`                                  | `setErrorAccessibilityLiveRegion`<br/>`getErrorAccessibilityLiveRegion`                                             | `ViewCompat.ACCESSIBILITY_LIVE_REGION_POLITE`                                                                                                                                                                                                                                                                                                |\n| **Error text color**                     | `app:errorTextColor`                                                | `setErrorTextColor`<br/>`getErrorCurrentTextColors`                                                                 | `?attr/colorError`                                                                                                                                                                                                                                                                                                                           |\n| **Error text typography**                | `app:errorTextAppearance`                                           | `setErrorTextAppearance`                                                                                            | `?attr/textAppearanceBodySmall`                                                                                                                                                                                                                                                                                                              |\n| **Counter text enabled**                 | `app:counterEnabled`                                                | `setCounterEnabled`<br/>`isCounterEnabled`                                                                          | `false`                                                                                                                                                                                                                                                                                                                                      |\n| **Counter text length**                  | `app:counterMaxLength`                                              | `setCounterMaxLength`<br/>`getCounterMaxLength`                                                                     | `-1`                                                                                                                                                                                                                                                                                                                                         |\n| **Counter text typography**              | `app:counterTextAppearance`<br/>`app:counterOverflowTextAppearance` | `setCounterTextAppearance`<br/>`setCounterOverflowTextAppearance`                                                   | `?attr/textAppearanceBodySmall`                                                                                                                                                                                                                                                                                                              |\n| **Counter text color**                   | `app:counterTextColor`<br/>`app:counterOverflowTextColor`           | `setCounterTextColor`<br/>`setCounterOverflowTextColor`<br/>`getCounterTextColor`<br/>`getCounterOverflowTextColor` | `?attr/colorOnSurfaceVariant` (`app:counterTextColor`) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))<br/>`?attr/colorError` (`app:counterOverflowTextColor`) |\n\n#### Prefix/suffix attributes\n\nElement               | Attribute                  | Related method(s)                             | Default value\n--------------------- | -------------------------- | --------------------------------------------- | -------------\n**Prefix**            | `app:prefixText`           | `setPrefixText`<br/>`getPrefixText`           | `null`\n**Prefix color**      | `app:prefixTextColor`      | `setPrefixTextColor`<br/>`getPrefixTextColor` | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Prefix typography** | `app:prefixTextAppearance` | `setPrefixTextAppearance`                     | `?attr/textAppearanceTitleMedium`\n**Suffix**            | `app:suffixText`           | `setSuffixText`<br/>`getSuffixText`           | `null`\n**Suffix color**      | `app:suffixTextColor`      | `setSuffixTextColor`<br/>`getSuffixTextColor` | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Suffix typography** | `app:suffixTextAppearance` | `setSuffixTextAppearance`                     | `?attr/textAppearanceTitleMedium`\n\n#### Styles\n\nElement                               | Style                                                                  | Default style theme attribute\n------------------------------------- | ---------------------------------------------------------------------- | -----------------------------\n**Default style**                     | `Widget.Material3.TextInputLayout.FilledBox`                           | `?attr/textInputFilledStyle`\n**Dense style**                       | `Widget.Material3.TextInputLayout.FilledBox.Dense`                     | `?attr/textInputFilledDenseStyle`\n**Exposed dropdown menu style**       | `Widget.Material3.TextInputLayout.FilledBox.ExposedDropdownMenu`       | `?attr/textInputFilledExposedDropdownMenuStyle`\n**Dense exposed dropdown menu style** | `Widget.Material3.TextInputLayout.FilledBox.Dense.ExposedDropdownMenu` | N/A\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/attrs.xml).\n\n## Outlined text field\n\n[Outlined text fields](https://material.io/components/text-fields/#outlined-text-field)\nhave less visual emphasis than filled text fields. When they appear in forms,\nfor example, where many text fields are placed together, their reduced emphasis\nhelps simplify the layout.\n\n**Note:** The outlined text field is the default style.\n\n### Outlined text field examples\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `TextInputEditText`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputEditText)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputEditText.java)\n\nThe following example shows an outlined text field.\n\n![Outlined text field](assets/textfields/textfields_outlined.png)\n\nIn the layout:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    android:id="@+id/outlinedTextField"\n    android:layout_width="match_parent"\n    android:layout_height="wrap_content"\n    android:hint="@string/label">\n\n    <com.google.android.material.textfield.TextInputEditText\n        android:layout_width="match_parent"\n        android:layout_height="wrap_content"\n    />\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\nIn code:\n\n```kt\n// Get input text\nval inputText = outlinedTextField.editText?.text.toString()\n\noutlinedTextField.editText?.doOnTextChanged { inputText, _, _, _ ->\n    // Respond to input text change\n}\n```\n\nSee the [using text fields](#using-text-fields) section above for more examples.\n\n### Anatomy and key properties\n\nAn outlined text field has a stroked container, input text, a label, optional\nhelper/error text and optional leading/trailing icons.\n\n![Outlined text field anatomy](assets/textfields/textfields_outlined_anatomy.png)\n\n1.  Container\n2.  Leading icon\n3.  Label\n4.  Input text\n5.  Trailing icon\n6.  Helper/error/counter text\n7.  Prefix/suffix/placeholder (not shown)\n\n#### Container attributes\n\nElement                  | Attribute                   | Related method(s)                                                            | Default value\n------------------------ | --------------------------- | ---------------------------------------------------------------------------- | -------------\n**Stroke color**         | `app:boxStrokeColor`        | `setBoxStrokeColor`<br/>`setBoxStrokeColorStateList`<br/>`getBoxStrokeColor` | `?attr/colorOutline` and `?attr/colorPrimary` (focused) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_stroke_color.xml))\n**Stroke error color**   | `app:boxStrokeErrorColor`   | `setBoxStrokeErrorColor`<br/>`getBoxStrokeErrorColor`                        | `?attr/colorError`\n**Stroke width**         | `app:boxStrokeWidth`        | N/A                                                                          | `1dp`\n**Stroke focused width** | `app:boxStrokeWidthFocused` | N/A                                                                          | `2dp`\n**Shape**                | `app:shapeAppearance`       | N/A                                                                          | `?attr/shapeAppearanceSmallComponent`\n**Text field enabled**   | `android:enabled`           | `setEnabled`                                                                 | `true`\n\n#### Leading icon attributes\n\nElement                 | Attribute                         | Related method(s)                                                     | Default value\n----------------------- | --------------------------------- | --------------------------------------------------------------------- | -------------\n**Icon**                | `app:startIconDrawable`           | `setStartIconDrawable`<br/>`getStartIconDrawable`                     | `null`\n**Content description** | `app:startIconContentDescription` | `setStartIconContentDescription`<br/>`getStartIconContentDescription` | `null`\n**Color**               | `app:startIconTint`               | `setStartIconTintList`                                                | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Checkable**           | `app:startIconCheckable`          | `setStartIconCheckable`<br/>`isStartIconCheckable`                    | `false`\n\n#### Label attributes\n\nElement                        | Attribute                | Related method(s)                                       | Default value\n------------------------------ | ------------------------ | ------------------------------------------------------- | -------------\n**Text**                       | `android:hint`           | `setHint`<br/>`getHint`                                 | `null`\n**Color**                      | `android:textColorHint`  | `setDefaultHintTextColor`<br/>`getDefaultHintTextColor` | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_label_color.xml))\n**Collapsed (floating) color** | `app:hintTextColor`      | `setHintTextColor`<br/>`getHintTextColor`               | `?attr/colorPrimary`\n**Typography**                 | `app:hintTextAppearance` | `setHintTextAppearance`                                 | `?attr/textAppearanceBodySmall`\n\n**Note:** The `android:hint` should always be set on the `TextInputLayout`\ninstead of on the `EditText` in order to avoid unintended behaviors.\n\n#### Input text attributes (set on the `TextInputEditText`)\n\nElement                  | Attribute                                                                | Related method(s)                                            | Default value\n------------------------ | ------------------------------------------------------------------------ | ------------------------------------------------------------ | -------------\n**Input text**           | `android:text`                                                           | `setText`<br/>`getText`                                      | `@null`\n**Typography**           | `android:textAppearance`                                                 | `setTextAppearance`                                          | `?attr/textAppearanceBodyLarge`\n**Input text color**     | `android:textColor`                                                      | `setTextColor`<br/>`getTextColors`<br/>`getCurrentTextColor` | `?attr/colorOnSurface`\n**Cursor color**         | N/A (color comes from the theme attr `?attr/colorControlActivated`)      | N/A                                                          | `?attr/colorPrimary`\n**Text highlight color** | N/A (color comes from the theme attr `?android:attr/textColorHighlight`) | N/A                                                          | [`@color/m3_highlighted_text`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/color/res/color/m3_highlighted_text.xml)\n\n#### Input text attributes (set on the `TextInputLayout`)\n\nElement                  | Attribute                                | Related method(s)                                                     | Default value\n------------------------ |------------------------------------------|-----------------------------------------------------------------------| -------------\n**Cursor color**         | `app:cursorColor` on API levels 28+      | `setCursorColor`<br/>`getCursorColor`<br/>on API levels 28+           | `@null` (uses `?attr/colorControlActivated` by default)\n**Cursor error color**   | `app:cursorErrorColor` on API levels 28+ | `setCursorErrorColor`<br/>`getCursorErrorColor`<br/>on API levels 28+ | `?attr/colorError` on API levels 28+, `?attr/colorControlActivated` otherwise\n\n\n#### Trailing icon attributes\n\nElement                             | Attribute                       | Related method(s)                                                 | Default value\n----------------------------------- | ------------------------------- | ----------------------------------------------------------------- | -------------\n**Mode**                            | `app:endIconMode`               | `setEndIconMode`<br/>`getEndIconMode`                             | `END_ICON_NONE`\n**Color**                           | `app:endIconTint`               | `setEndIconTintList`                                              | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Custom icon**                     | `app:endIconDrawable`           | `setEndIconDrawable`<br/>`getEndIconDrawable`                     | `null`\n**Custom icon content description** | `app:endIconContentDescription` | `setEndIconContentDescription`<br/>`getEndIconContentDescription` | `null`\n**Custom icon checkable**           | `app:endIconCheckable`          | `setEndIconCheckable`<br/>`isEndIconCheckable`                    | `true`\n**Error icon**                      | `app:errorIconDrawable`         | `setErrorIconDrawable`<br/>`getErrorIconDrawable`                 | [`@drawable/mtrl_ic_error`](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/drawable/mtrl_ic_error.xml)\n**Error icon color**                | `app:errorIconTint`             | `setErrorIconTintList`                                            | `?attr/colorError`\n\n#### Helper/error/counter text attributes\n\n| Element                                  | Attribute                                                           | Related method(s)                                                                                                   | Default value                                                                                                                                                                                                                                                                                                                                |\n|------------------------------------------|---------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **Helper text enabled**                  | `app:helperTextEnabled`                                             | `setHelperTextEnabled`<br/>`isHelperTextEnabled`                                                                    | `false`                                                                                                                                                                                                                                                                                                                                      |\n| **Helper text**                          | `app:helperText`                                                    | `setHelperText`<br/>`getHelperText`                                                                                 | `null`                                                                                                                                                                                                                                                                                                                                       |\n| **Helper text color**                    | `app:helperTextColor`                                               | `setHelperTextColor`<br/>`getHelperTextColor`                                                                       | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))                                                                                  |\n| **Helper text typography**               | `app:helperTextAppearance`                                          | `setHelperTextAppearance`                                                                                           | `?attr/textAppearanceBodySmall`                                                                                                                                                                                                                                                                                                              |\n| **Error text enabled**                   | `app:errorEnabled`                                                  | `setErrorEnabled`<br/>`isErrorEnabled`                                                                              | `false`                                                                                                                                                                                                                                                                                                                                      |\n| **Error text**                           | N/A                                                                 | `setError`<br/>`getError`                                                                                           | `null`                                                                                                                                                                                                                                                                                                                                       |\n| **Error text accessibility live region** | `app:errorAccessibilityLiveRegion`                                  | `setErrorAccessibilityLiveRegion`<br/>`getErrorAccessibilityLiveRegion`                                             | `ViewCompat.ACCESSIBILITY_LIVE_REGION_POLITE`                                                                                                                                                                                                                                                                                                |\n| **Error text color**                     | `app:errorTextColor`                                                | `setErrorTextColor`<br/>`getErrorCurrentTextColors`                                                                 | `?attr/colorError`                                                                                                                                                                                                                                                                                                                           |\n| **Error text typography**                | `app:errorTextAppearance`                                           | `setErrorTextAppearance`                                                                                            | `?attr/textAppearanceBodySmall`                                                                                                                                                                                                                                                                                                              |\n| **Counter text enabled**                 | `app:counterEnabled`                                                | `setCounterEnabled`<br/>`isCounterEnabled`                                                                          | `false`                                                                                                                                                                                                                                                                                                                                      |\n| **Counter text length**                  | `app:counterMaxLength`                                              | `setCounterMaxLength`<br/>`getCounterMaxLength`                                                                     | `-1`                                                                                                                                                                                                                                                                                                                                         |\n| **Counter text typography**              | `app:counterTextAppearance`<br/>`app:counterOverflowTextAppearance` | `setCounterTextAppearance`<br/>`setCounterOverflowTextAppearance`                                                   | `?attr/textAppearanceBodySmall`                                                                                                                                                                                                                                                                                                              |\n| **Counter text color**                   | `app:counterTextColor`<br/>`app:counterOverflowTextColor`           | `setCounterTextColor`<br/>`setCounterOverflowTextColor`<br/>`getCounterTextColor`<br/>`getCounterOverflowTextColor` | `?attr/colorOnSurfaceVariant` (`app:counterTextColor`) (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))<br/>`?attr/colorError` (`app:counterOverflowTextColor`) |\n\n#### Prefix/suffix attributes\n\nElement               | Attribute                  | Related method(s)                             | Default value\n--------------------- | -------------------------- | --------------------------------------------- | -------------\n**Prefix**            | `app:prefixText`           | `setPrefixText`<br/>`getPrefixText`           | `null`\n**Prefix color**      | `app:prefixTextColor`      | `setPrefixTextColor`<br/>`getPrefixTextColor` | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Prefix typography** | `app:prefixTextAppearance` | `setPrefixTextAppearance`                     | `?attr/textAppearanceTitleMedium`\n**Suffix**            | `app:suffixText`           | `setSuffixText`<br/>`getSuffixText`           | `null`\n**Suffix color**      | `app:suffixTextColor`      | `setSuffixTextColor`<br/>`getSuffixTextColor` | `?attr/colorOnSurfaceVariant` (see all [states](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/color/m3_textfield_indicator_text_color.xml))\n**Suffix typography** | `app:suffixTextAppearance` | `setSuffixTextAppearance`                     | `?attr/textAppearanceTitleMedium`\n\n#### Styles\n\nElement                               | Style                                                                    | Default style theme attribute\n------------------------------------- | ------------------------------------------------------------------------ | -----------------------------\n**Default style**                     | `Widget.Material3.TextInputLayout.OutlinedBox`                           | `?attr/textInputStyle` and `?attr/textInputOutlinedStyle`\n**Dense style**                       | `Widget.Material3.TextInputLayout.OutlinedBox.Dense`                     | `?attr/textInputOutlinedDenseStyle`\n**Exposed dropdown menu style**       | `Widget.Material3.TextInputLayout.OutlinedBox.ExposedDropdownMenu`       | `?attr/textInputOutlinedExposedDropdownMenuStyle`\n**Dense exposed dropdown menu style** | `Widget.Material3.TextInputLayout.OutlinedBox.Dense.ExposedDropdownMenu` | N/A\n\nSee the full list of\n[styles](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/styles.xml)\nand\n[attrs](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/res/values/attrs.xml).\n\n## Theming text fields\n\nText fields support\n[Material Theming](https://material.io/components/text-fields/#theming) which\nprovides color, typography and shape customization.\n\n### Text field theming example\n\nAPI and source code:\n\n*   `TextInputLayout`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputLayout)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputLayout.java)\n*   `TextInputEditText`\n    *   [Class definition](https://developer.android.com/reference/com/google/android/material/textfield/TextInputEditText)\n    *   [Class source](https://github.com/material-components/material-components-android/tree/master/lib/java/com/google/android/material/textfield/TextInputEditText.java)\n\nThe following example shows filled and outlined text field types with Material\nTheming.\n\n!["Filled and outlined text field theming with pink and brown colors and cut\ncorners"](assets/textfields/textfields_theming.png)\n\n#### Implementing text field theming\n\nUsing theme attributes and styles in `res/values/styles.xml` adds themes to all\ntext fields and affects other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorError">@color/shrine_red</item>\n    <item name="textAppearanceTitleMedium">@style/TextAppearance.App.TitleMedium</item>\n    <item name="textAppearanceBodySmall">@style/TextAppearance.App.BodySmall</item>\n    <item name="shapeAppearanceSmallComponent">@style/ShapeAppearance.App.SmallComponent</item>\n</style>\n\n<style name="TextAppearance.App.TitleMedium" parent="TextAppearance.Material3.TitleMedium">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="TextAppearance.App.BodySmall" parent="TextAppearance.Material3.BodySmall">\n    <item name="fontFamily">@font/rubik</item>\n    <item name="android:fontFamily">@font/rubik</item>\n</style>\n\n<style name="ShapeAppearance.App.SmallComponent" parent="ShapeAppearance.Material3.SmallComponent">\n    <item name="cornerFamily">cut</item>\n    <item name="cornerSize">4dp</item>\n</style>\n```\n\nUsing default style theme attributes, styles and theme overlays adds themes to\nall text fields but does not affect other components:\n\n```xml\n<style name="Theme.App" parent="Theme.Material3.*">\n    ...\n    <item name="textInputStyle">@style/Widget.App.TextInputLayout</item>\n</style>\n\n<style name="Widget.App.TextInputLayout" parent="Widget.Material3.TextInputLayout.*">\n    <item name="materialThemeOverlay">@style/ThemeOverlay.App.TextInputLayout</item>\n    <item name="shapeAppearance">@style/ShapeAppearance.App.SmallComponent</item>\n    <item name="hintTextColor">?attr/colorOnSurface</item>\n</style>\n\n<style name="ThemeOverlay.App.TextInputLayout" parent="">\n    <item name="colorPrimary">@color/shrine_pink_100</item>\n    <item name="colorOnSurface">@color/shrine_pink_900</item>\n    <item name="colorError">@color/shrine_red</item>\n    <item name="textAppearanceTitleMedium">@style/TextAppearance.App.TitleMedium</item>\n    <item name="textAppearanceBodySmall">@style/TextAppearance.App.BodySmall</item>\n    <item name="editTextStyle">@style/Widget.Material3.TextInputEditText.*</item>\n</style>\n```\n\nUsing the style in the layout affects only this text field:\n\n```xml\n<com.google.android.material.textfield.TextInputLayout\n    ...\n    style="@style/Widget.App.TextInputLayout">\n\n    ...\n\n</com.google.android.material.textfield.TextInputLayout>\n```\n\n**Note:** When setting a `materialThemeOverlay` on a custom `TextInputLayout`\nstyle, don\'t forget to set `editTextStyle` to either a\n`@style/Widget.Material3.TextInputEditText.*` style or to a custom one that\ninherits from that. <br/> The `TextInputLayout` styles set\n`materialThemeOverlay` to override `editTextStyle` with the specific\n`TextInputEditText` style needed. Therefore, you don\'t need to specify a style\ntag on the edit text.\n'})}}},Example.parameters=Object.assign({storySource:{source:'(props) => {\n    return <EmulatorRenderer\n        \n        apiKey="kcfvhstvvpfhk5gkrzrndj36re"\n        platform="android"\n        storyParams={{"component":"textfield"}}\n        deepLinkBaseUrl={"sb-native://deep.link"}\n        extraParams={props}\n    />;\n}'}},Example.parameters),Example.__docgenInfo={description:"",methods:[],displayName:"Example"},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["stories\\textfield.stories.jsx"]={name:"Example",docgenInfo:Example.__docgenInfo,path:"stories\\textfield.stories.jsx"})},"./storybook-init-framework-entry.js":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);__webpack_require__("./node_modules/@storybook/react/dist/esm/client/index.js")},0:function(module,exports,__webpack_require__){__webpack_require__("./node_modules/@storybook/core-client/dist/esm/globals/polyfills.js"),__webpack_require__("./node_modules/@storybook/core-client/dist/esm/globals/globals.js"),__webpack_require__("./storybook-init-framework-entry.js"),__webpack_require__("./node_modules/@storybook/react/dist/esm/client/docs/config-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/react/dist/esm/client/preview/config-generated-config-entry.js"),__webpack_require__("./node_modules/@storybook/addon-docs/preview.js-generated-config-entry.js"),__webpack_require__("./.storybook/preview.js-generated-config-entry.js"),module.exports=__webpack_require__("./generated-stories-entry.js")},1:function(module,exports){}},[[0,4,5]]]);